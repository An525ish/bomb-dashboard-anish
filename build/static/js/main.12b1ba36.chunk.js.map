{"version":3,"sources":["utils/constants.ts","state/transactions/actions.ts","state/application/hooks.ts","utils/provider.ts","bomb-finance/ERC20.ts","services/graph/fetchers/pools.ts","services/graph/constants/index.ts","services/graph/queries/pools.ts","bomb-finance/BombFinance.ts","contexts/BombFinanceProvider/BombFinanceProvider.tsx","utils/formatBalance.ts","hooks/useBombFinance.ts","contexts/Banks/context.ts","contexts/Banks/Banks.tsx","hooks/useNetworkPrompt.ts","config.ts","contexts/Modals/Modals.tsx","contexts/RefreshContext/RefreshContextProvider.tsx","state/application/actions.ts","bomb-finance/config.ts","bomb-finance/ether-utils.ts","state/transactions/reducer.ts","state/application/reducer.ts","state/index.ts","theme/colors.ts","theme/index.ts","newTheme.js","hooks/useIsWindowVisible.ts","state/application/updater.ts","hooks/useDebounce.ts","state/transactions/updater.tsx","state/Updaters.tsx","components/Loader/index.js","components/Loader/Loader.js","components/Popups/TransactionPopup.tsx","components/Popups/ErrorPopup.tsx","components/Popups/PopupItem.tsx","components/Popups/index.tsx","hooks/useChainId.js","App.tsx","serviceWorker.js","index.tsx"],"names":["BOMB_TICKER","BSHARE_TICKER","BNB_TICKER","BTC_TICKER","SPOOKY_ROUTER_ADDR","ZAPPER_ROUTER_ADDR","addTransaction","createAction","clearAllTransactions","finalizeTransaction","checkedTransaction","useBlockNumber","chainId","useWallet","useSelector","state","application","blockNumber","useAddPopup","dispatch","useDispatch","useCallback","content","key","addPopup","useRemovePopup","removePopup","useActivePopups","list","popupList","useMemo","filter","item","show","provider","getDefaultProvider","ethers","providers","Web3Provider","web3ProviderFrom","config","defaultProvider","ERC20","address","symbol","decimal","contract","this","Contract","ABI","signerOrProvider","estimateGas","totalSupply","account","balanceOf","recipient","amount","transfer","owner","spender","allowance","approve","sender","transferFrom","a","balance","formatUnits","supply","Number","toFixed","inputs","internalType","name","type","stateMutability","anonymous","indexed","outputs","appClient","ApolloClient","uri","cache","InMemoryCache","bombMaxi","poolId","query","gql","variables","id","BombFinance","cfg","myAccount","signer","contracts","externalTokens","boardroomVersionOfUser","BOMBBTCB_LP","BOMB","BUSD","BSHARE","BBOND","XBOMB","BNB","BTC","BOMB_BORROWABLE","BTCB_BORROWABLE","BBOMB_BOMB","BBOMB_BTCB","BBOMBBOMB","BBOMBBTCB","BUSMBUSD_LP","BUSM","BOMB_MAXI","BSHARE_MAXI","deployments","Object","entries","deployment","abi","Bomb","BShare","BBond","xBOMB","BombBorrowable","BtcbBorrowable","IBombBorrowableABI","BombMaxiLPBShareRewardPool","BshareMaxiLPBShareRewardPool","IUniswapV2PairABI","newProvider","getSigner","connect","tokens","values","console","log","fetchBoardroomVersionOfUser","then","version","catch","err","error","stack","BombRewardPool","BombGenesisRewardPool","bombRewardPoolSupply","bombRewardPoolSupply2","bombCirculatingSupply","sub","getTokenPriceFromPancakeswapBTC","priceInBTC","getBTCBPriceFromPancakeswap","priceOfOneBTC","priceOfBombInDollars","tokenInFtm","toString","priceInDollars","getDisplayBalance","circulatingSupply","lpToken","lpTokenSupplyBN","lpTokenSupply","token0","startsWith","isBomb","tokenAmountBN","tokenAmount","ftmAmountBN","ftmAmount","tokenAmountInOneLP","ftmAmountInOneLP","getLPTokenPrice","lpTokenPrice","lpTokenPriceFixed","liquidity","priceOfOne","totalLiquidity","btcAmountBN","btcAmount","Treasury","getBombStat","bombStat","getBondPremiumRate","bondBombRatioBN","modifier","bondPriceInBNB","priceOfBBondInDollars","displayedTotalSupply","BShareRewardPool","getTokenPriceFromPancakeswap","priceInBNB","tShareCirculatingSupply","getWBNBPriceFromPancakeswap","priceOfOneBNB","priceOfSharesInDollars","Oracle","twap","utils","parseEther","expectedPrice","getBombUpdatedPrice","getBurnableBombLeft","BombMaxi","totalShares","data","pool","bank","undefined","depositToken","poolContract","depositTokenValue","depositTokenName","getDepositTokenPriceInDollars","depositTokenPrice","stakeInPool","TVL","earnTokenName","getShareStat","stat","getTokenPerSecond","tokenPerSecond","tokenPerHour","mul","totalRewardPricePerYear","totalRewardPricePerDay","totalStakingTokenInPool","dailyAPR","yearlyAPR","bombToken","xbombToken","getXbombExchange","xbombExchange","xbombPercent","xbombPercentTotal","startDate","Date","nowDate","now","difference","getTime","aprPerDay","contractName","endsWith","tSharePerSecond","rewardPerSecond","div","poolStartTime","startDateTime","toNumber","epochBombPerSecond","tokenName","token","priceOfOneFtmInDollars","tokenPrice","getBusdLPTokenPrice","getMaxiLPTokenPrice","epoch","getBombPrice","treasuryBombPrice","buyBonds","decimalToBalance","priceForBomb","redeemBonds","totalValue","bankDefinitions","bankInfo","tokenAmountInPool","value","poolValue","isNaN","BSHAREPrice","BOMBPrice","currentBoardroom","boardroomtShareBalanceOf","bombStakeBalanceOf","boardroomTVL","bombTVL","getFullDisplayBalance","tokenSupply","priceOfToken","tokenInLP","getTokenPriceFromPancakeswapBUSD","priceToken","maxiPool","getBombMaxiStats","bombmaxi","poolName","pendingBOMB","pendingShare","BigNumber","from","userInfo","deposit","withdraw","Boardroom","tokenContract","ready","WBNB","wftm","Token","Fetcher","fetchPairData","wftmToToken","priceInBUSD","Route","midPrice","btcb","priceForPeg","FUSDT","fusdt_wftm_lp_pair","ftm_amount_BN","ftm_amount","fusdt_amount_BN","fusdt_amount","BTCB","btcPriceInBNB","wbnbPrice","btcprice","latestSnapshotIndex","boardroomHistory","lastHistory","lastRewardsReceived","amountOfRewardsPerDay","realAPR","xBombBombBalanceOf","canClaimReward","canWithdraw","getStakedSharesOnBoardroom","stakedAmount","notStaked","result","isOldBoardroomMember","Error","stake","Xbomb","enter","BombRouter","expiry","redeem","mint","getShareOf","bomb","bbombBomb","totalBalance","totalBomb","totalBtcb","getExchangeRate","XbombExchange","xBombPerBomb","parseFloat","xBombRate","parseUnits","leave","getCashEarningsOf","earned","claimDividends","claimReward","exit","nextEpochPoint","nextEpochTimestamp","nextAllocation","prevAllocation","to","currentEpoch","members","mason","startTimeEpoch","epochTimerStart","PERIOD","period","periodInHours","rewardLockupEpochs","targetEpochForClaimUnlock","fromDate","toDate","delta","endDate","moment","add","PeriodInHours","withdrawLockupEpochs","assetName","window","ethereum","networkVersion","asset","assetUrl","request","method","params","options","decimals","image","bombAmount","TaxOffice","overrides","addLiquidityETHTaxFree","SpookyRouter","getReserves","_reserve0","_reserve1","quote","treasuryDaoFundedFilter","filters","DaoFundFunded","treasuryDevFundedFilter","DevFundFunded","treasuryBoardroomFundedFilter","BoardroomFunded","boughtBondsFilter","BoughtBonds","redeemBondsFilter","RedeemedBonds","epochBlocksRanges","queryFilter","boardroomFundEvents","events","forEach","index","push","boardroomFund","args","startBlock","boughBonds","redeemedBonds","endBlock","getBondsWithFilterForPeriod","bondsBought","bondsRedeemed","devFund","daoFund","bondsAmount","length","lpName","zapper","estimateZapIn","estimate","estimateZapInToken","zapIn","zapInToken","bbondAmount","BShareSwapper","swapBBondToBShare","estimateAmountOfBShare","estimateBN","getBShareBalance","bshareBalanceBN","getBBondBalance","bbondBalanceBN","getBShareAmountPerBomb","rateBSharePerBombBN","bshareBalance","bbondBalance","rateBSharePerBomb","Context","createContext","bombFinance","BombFinanceProvider","children","useState","setBombFinance","useEffect","unlockWallet","Provider","fractionDigits","isTruncated","number","getBalance","ret","slice","pow","useBombFinance","useContext","context","banks","Banks","setBanks","isUnlocked","fetchPools","finished","stakedBalanceOnBank","lte","earnToken","sort","b","connectToNetwork","chainName","networkName","nativeCurrency","rpcUrls","blockExplorerUrls","ftmscanUrl","usePromptNetwork","networkPrompt","setNetworkPrompt","configurations","development","require","SBTC","SUSD","SVL","CAKE","ZOO","SHIBA","baseLaunchDate","bondLaunchesAt","boardroomLaunchesAt","refreshInterval","production","BombSBTCRewardPool","sectionInUI","closedForStaking","BombSUSDRewardPool","BusmBusdLPBShareRewardPool","BombBShareRewardPool","BBondBShareRewardPool","BshareBnbLPBShareRewardPool","BombBtcbLPBShareRewardPool","BombBshareLPBShareRewardPool","onPresent","onDismiss","StyledModalWrapper","styled","StyledModalBackdrop","Modals","isOpen","setIsOpen","setContent","handlePresent","modalContent","handleDismiss","onClick","React","isValidElement","cloneElement","RefreshContext","slow","fast","RefreshContextProvider","setSlow","setFast","interval","setInterval","prev","clearInterval","updateBlockNumber","toggleWalletModal","toggleSettingsMenu","defaultEthereumConfig","testing","autoGasMultiplier","defaultConfirmations","defaultGas","defaultGasPrice","ethereumNodeTimeout","endpoint","ethConfig","assign","includes","Web3","WebsocketProvider","HttpProvider","timeout","d","String","createReducer","builder","addCase","transactions","payload","hash","approval","summary","txs","addedTime","tx","lastCheckedBlockNumber","Math","max","receipt","confirmedTime","walletModalOpen","settingsMenuOpen","action","removeAfterMs","popup","concat","nanoid","p","PERSISTED_KEYS","store","configureStore","reducer","middleware","getDefaultMiddleware","thunk","save","states","preloadedState","load","teal","200","theme","borderRadius","color","black","grey","100","300","400","500","600","700","800","900","yellow","primary","light","main","secondary","white","newNavy","siteWidth","spacing","1","2","3","4","5","6","7","topBarSize","newTheme","createTheme","palette","text","background","default","paper","dark","contrastText","disabledBackground","active","hover","typography","fontFamily","join","VISIBILITY_STATE_SUPPORTED","document","isWindowVisible","visibilityState","Updater","windowVisible","focused","setFocused","listener","addEventListener","removeEventListener","useIsWindowVisible","setState","blockNumberCallback","getBlockNumber","on","removeListener","debouncedState","delay","debouncedValue","setDebouncedValue","handler","setTimeout","clearTimeout","useDebounce","lastBlockNumber","keys","blocksSinceCheck","minutesPending","shouldCheck","getTransactionReceipt","blockHash","contractAddress","status","transactionHash","transactionIndex","txn","success","Updaters","Loader","style","position","left","top","transform","Typography","RowNoFlex","TransactionPopup","ThemeContext","paddingRight","size","StyledPopupDesc","StyledLink","target","href","span","props","ErrorPopup","message","copyErrorDetails","navigator","clipboard","writeText","StyledClose","X","Popup","Fader","AnimatedFader","animated","PopupItem","popKey","removeThisPopup","popupContent","faderStyle","useSpring","width","duration","text2","MobilePopupWrapper","height","MobilePopupInner","FixedPopupColumn","Popups","activePopups","map","reverse","useChainId","setChainId","fetchChainId","parseInt","refreshChainId","Home","lazy","Farm","Bond","Supply","Dashboard","NoMatch","UseWalletProviderWrapper","Providers","connectors","walletconnect","rpcUrl","walletlink","url","appName","appLogoUrl","App","localStorage","version_app","clear","setItem","fallback","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.12b1ba36.chunk.js","sourcesContent":["export const BOMB_TICKER = 'BOMB';\nexport const BSHARE_TICKER = 'BSHARE';\nexport const BBOND_TICKER = 'BBOND';\nexport const BNB_TICKER = 'BNB';\nexport const WBNB_TICKER = 'WBNB';\nexport const BTC_TICKER = 'BTCB';\n\nexport const SPOOKY_ROUTER_ADDR = '0x10ED43C718714eb63d5aA57B78B54704E256024E';\nexport const ZAPPER_ROUTER_ADDR = '0xA0C5F779e52A8D9a81aF17Dd910577946B6810F6';\nexport const TAX_OFFICE_ADDR = '0x2A637BEE0D76136d8ee44B96cf0A5f9198657AaF';\n","import {createAction} from '@reduxjs/toolkit';\n// import { ChainId } from '@uniswap/sdk';\nimport {ChainId} from '@pancakeswap/sdk';\n\nexport interface SerializableTransactionReceipt {\n  to: string;\n  from: string;\n  contractAddress: string;\n  transactionIndex: number;\n  blockHash: string;\n  transactionHash: string;\n  blockNumber: number;\n  status?: number;\n}\n\nexport const addTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  from: string;\n  approval?: {tokenAddress: string; spender: string};\n  summary?: string;\n}>('transactions/addTransaction');\n\nexport const clearAllTransactions = createAction<{chainId: ChainId}>('transactions/clearAllTransactions');\n\nexport const finalizeTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  receipt: SerializableTransactionReceipt;\n}>('transactions/finalizeTransaction');\n\nexport const checkedTransaction = createAction<{\n  chainId: ChainId;\n  hash: string;\n  blockNumber: number;\n}>('transactions/checkedTransaction');\n","import {useCallback, useMemo} from 'react';\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu} from './actions';\nimport {useSelector, useDispatch} from 'react-redux';\nimport {AppState} from '../index';\nimport {useWallet} from 'use-wallet';\n\nexport function useBlockNumber(): number | undefined {\n  const {chainId} = useWallet();\n  return useSelector((state: AppState) => state.application.blockNumber[chainId ?? -1]);\n}\n\nexport function useWalletModalOpen(): boolean {\n  return useSelector((state: AppState) => state.application.walletModalOpen);\n}\n\nexport function useWalletModalToggle(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleWalletModal()), [dispatch]);\n}\n\nexport function useSettingsMenuOpen(): boolean {\n  return useSelector((state: AppState) => state.application.settingsMenuOpen);\n}\n\nexport function useToggleSettingsMenu(): () => void {\n  const dispatch = useDispatch();\n  return useCallback(() => dispatch(toggleSettingsMenu()), [dispatch]);\n}\n\n// returns a function that allows adding a popup\nexport function useAddPopup(): (content: PopupContent, key?: string) => void {\n  const dispatch = useDispatch();\n\n  return useCallback(\n    (content: PopupContent, key?: string) => {\n      dispatch(addPopup({content, key}));\n    },\n    [dispatch],\n  );\n}\n\n// returns a function that allows removing a popup via its key\nexport function useRemovePopup(): (key: string) => void {\n  const dispatch = useDispatch();\n  return useCallback(\n    (key: string) => {\n      dispatch(removePopup({key}));\n    },\n    [dispatch],\n  );\n}\n\n// get the list of active popups\nexport function useActivePopups(): AppState['application']['popupList'] {\n  const list = useSelector((state: AppState) => state.application.popupList);\n  return useMemo(() => list.filter((item) => item.show), [list]);\n}\n","import { ethers } from 'ethers';\nimport config from '../config';\nimport { web3ProviderFrom } from '../bomb-finance/ether-utils';\n\nlet provider: ethers.providers.Web3Provider = null;\n\nexport function getDefaultProvider(): ethers.providers.Web3Provider {\n  if (!provider) {\n    provider = new ethers.providers.Web3Provider(web3ProviderFrom(config.defaultProvider), config.chainId);\n  }\n\n  return provider;\n}\n","import {BigNumber, Contract} from 'ethers';\nimport {Signer} from '@ethersproject/abstract-signer';\nimport {Provider} from '@ethersproject/abstract-provider';\nimport {TransactionResponse} from '@ethersproject/providers';\nimport {formatUnits} from 'ethers/lib/utils';\n\nclass ERC20 {\n  private contract: Contract;\n\n  address: string;\n  symbol: string;\n  decimal: number;\n\n  constructor(address: string, provider: Signer | Provider, symbol: string, decimal = 18) {\n    this.contract = new Contract(address, ABI, provider);\n    this.address = address;\n    this.symbol = symbol;\n    this.decimal = decimal;\n  }\n\n  connect(signerOrProvider: Signer | Provider) {\n    this.contract = new Contract(this.address, ABI, signerOrProvider);\n  }\n\n  get estimateGas() {\n    return this.contract.estimateGas;\n  }\n\n  totalSupply(): Promise<BigNumber> {\n    return this.contract.totalSupply();\n  }\n\n  balanceOf(account: string): Promise<BigNumber> {\n    return this.contract.balanceOf(account);\n  }\n\n  transfer(recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transfer(recipient, amount);\n  }\n\n  allowance(owner: string, spender: string): Promise<BigNumber> {\n    return this.contract.allowance(owner, spender);\n  }\n\n  approve(spender: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.approve(spender, amount);\n  }\n\n  transferFrom(sender: string, recipient: string, amount: BigNumber): Promise<TransactionResponse> {\n    return this.contract.transferFrom(sender, recipient, amount);\n  }\n\n  async displayedBalanceOf(account: string): Promise<string> {\n    const balance = await this.balanceOf(account);\n    return formatUnits(balance, this.decimal);\n  }\n\n  async displayedTotalSupply(): Promise<string> {\n    const supply = await this.totalSupply();\n    return Number(formatUnits(supply, this.decimal)).toFixed(0);\n  }\n}\n\nexport default ERC20;\n\nconst ABI = [\n  {\n    inputs: [\n      {internalType: 'string', name: 'name', type: 'string'},\n      {\n        internalType: 'string',\n        name: 'symbol',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Approval',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'from',\n        type: 'address',\n      },\n      {\n        indexed: true,\n        internalType: 'address',\n        name: 'to',\n        type: 'address',\n      },\n      {\n        indexed: false,\n        internalType: 'uint256',\n        name: 'value',\n        type: 'uint256',\n      },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    inputs: [],\n    name: 'name',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'symbol',\n    outputs: [\n      {\n        internalType: 'string',\n        name: '',\n        type: 'string',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'decimals',\n    outputs: [\n      {\n        internalType: 'uint8',\n        name: '',\n        type: 'uint8',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [],\n    name: 'totalSupply',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'account',\n        type: 'address',\n      },\n    ],\n    name: 'balanceOf',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transfer',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'owner',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n    ],\n    name: 'allowance',\n    outputs: [\n      {\n        internalType: 'uint256',\n        name: '',\n        type: 'uint256',\n      },\n    ],\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'approve',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'sender',\n        type: 'address',\n      },\n      {\n        internalType: 'address',\n        name: 'recipient',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'amount',\n        type: 'uint256',\n      },\n    ],\n    name: 'transferFrom',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'addedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'increaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [\n      {\n        internalType: 'address',\n        name: 'spender',\n        type: 'address',\n      },\n      {\n        internalType: 'uint256',\n        name: 'subtractedValue',\n        type: 'uint256',\n      },\n    ],\n    name: 'decreaseAllowance',\n    outputs: [\n      {\n        internalType: 'bool',\n        name: '',\n        type: 'bool',\n      },\n    ],\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n];\n","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport { GRAPH_HOST } from '../constants';\n\nimport { poolQuery } from '../queries/pools';\n\nconst appClient = new ApolloClient({\n  uri: GRAPH_HOST,\n  cache: new InMemoryCache(),\n});\n\nexport const bombMaxi = (poolId: string) =>\n  appClient.query({\n    query: gql(poolQuery),\n    variables: {\n      id: poolId,\n    },\n  });\n//     .then((data) => return data.data.pool\n//        // console.log('Subgraph data: ', data.data.pool))\n// .catch((err) => {\n//     console.log('Error fetching data: ', err);\n\n// });\n","const THE_GRAPH = 'https://api.thegraph.com/subgraphs/name/acryptosx/balancer-v2';\n\nexport const GRAPH_HOST = THE_GRAPH;\n","export const poolQuery = `\n  query($id: String) { pool(id: $id) {\n    id\n    address\n    totalLiquidity\n    totalShares\n    poolType\n    factory\n  }\n}\n`;\n\n//0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028\n","// import { Fetcher, Route, Token } from '@uniswap/sdk';\n//import { Fetcher as FetcherSpirit, Token as TokenSpirit } from '@spiritswap/sdk';\nimport { Fetcher, Route, Token } from '@pancakeswap/sdk';\nimport { Configuration } from './config';\nimport { MaxiInfo, ContractName, TokenStat, AllocationTime, LPStat, Bank, PoolStats, BShareSwapperStat } from './types';\nimport { BigNumber, Contract, ethers, EventFilter } from 'ethers';\nimport { decimalToBalance } from './ether-utils';\nimport { TransactionResponse } from '@ethersproject/providers';\nimport ERC20 from './ERC20';\nimport { getFullDisplayBalance, getDisplayBalance } from '../utils/formatBalance';\nimport { getDefaultProvider } from '../utils/provider';\nimport IUniswapV2PairABI from './IUniswapV2Pair.abi.json';\nimport IBombBorrowableABI from './IBombBorrowable.abi.json';\n\nimport config, { bankDefinitions } from '../config';\nimport moment from 'moment';\nimport { parseUnits } from 'ethers/lib/utils';\nimport { BNB_TICKER, SPOOKY_ROUTER_ADDR, BOMB_TICKER } from '../utils/constants';\nimport { bombMaxi } from '../services/graph';\n\n/**\n * An API module of Bomb Money contracts.\n * All contract-interacting domain logic should be defined in here.\n */\nexport class BombFinance {\n  myAccount: string;\n  provider: ethers.providers.Web3Provider;\n  signer?: ethers.Signer;\n  config: Configuration;\n  contracts: { [name: string]: Contract };\n  externalTokens: { [name: string]: ERC20 };\n  boardroomVersionOfUser?: string;\n\n  BOMBBTCB_LP: Contract;\n  BOMB: ERC20;\n  BUSD: ERC20;\n  BSHARE: ERC20;\n  BBOND: ERC20;\n  XBOMB: ERC20;\n  BNB: ERC20;\n  BTC: ERC20;\n  BOMB_BORROWABLE: Contract;\n  BTCB_BORROWABLE: Contract;\n  BBOMB_BOMB: ERC20;\n  BBOMB_BTCB: ERC20;\n  BBOMBBOMB: ERC20;\n  BBOMBBTCB: ERC20;\n  BUSMBUSD_LP: Contract;\n  BUSM: ERC20;\n  BOMB_MAXI: ERC20;\n  BSHARE_MAXI: ERC20;\n\n  constructor(cfg: Configuration) {\n    const { deployments, externalTokens } = cfg;\n    const provider = getDefaultProvider();\n\n    // loads contracts from deployments\n    this.contracts = {};\n    for (const [name, deployment] of Object.entries(deployments)) {\n      this.contracts[name] = new Contract(deployment.address, deployment.abi, provider);\n    }\n    this.externalTokens = {};\n    for (const [symbol, [address, decimal]] of Object.entries(externalTokens)) {\n      this.externalTokens[symbol] = new ERC20(address, provider, symbol, decimal);\n    }\n    this.BOMB = new ERC20(deployments.Bomb.address, provider, 'BOMB');\n    this.BSHARE = new ERC20(deployments.BShare.address, provider, 'BSHARE');\n    this.BBOND = new ERC20(deployments.BBond.address, provider, 'BBOND');\n    this.BNB = this.externalTokens['WBNB'];\n    this.BTC = this.externalTokens['BTCB'];\n    this.XBOMB = new ERC20(deployments.xBOMB.address, provider, 'XBOMB');\n    this.BUSM = this.externalTokens['BUSM'];\n    this.BUSD = this.externalTokens['BUSD'];\n\n    // this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    // this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n\n    // this.BBOMB_BOMB = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    // this.BBOMB_BTCB = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n    this.BBOMB_BOMB = new ERC20(deployments.BombBorrowable.address, provider, 'bBOMB');\n    this.BBOMBBOMB = this.externalTokens['BBOMB-BOMB'];\n    this.BBOMBBTCB = this.externalTokens['BBOMB-BTCB'];\n\n    this.BBOMB_BTCB = new ERC20(deployments.BtcbBorrowable.address, provider, 'bBOMB');\n    this.BOMB_BORROWABLE = new Contract(externalTokens['BBOMB-BOMB'][0], IBombBorrowableABI, provider);\n    this.BTCB_BORROWABLE = new Contract(externalTokens['BBOMB-BTCB'][0], IBombBorrowableABI, provider);\n\n    this.BOMB_MAXI = new ERC20(deployments.BombMaxiLPBShareRewardPool.address, provider, '80BOMB-20BTCB-LP');\n    this.BSHARE_MAXI = new ERC20(deployments.BshareMaxiLPBShareRewardPool.address, provider, '80BSHARE-20WBNB-LP');\n\n    // Uniswap V2 Pair\n\n    this.BOMBBTCB_LP = new Contract(externalTokens['BOMB-BTCB-LP'][0], IUniswapV2PairABI, provider);\n    this.BUSMBUSD_LP = new Contract(externalTokens['BUSM-BUSD-LP'][0], IUniswapV2PairABI, provider);\n\n    this.config = cfg;\n    this.provider = provider;\n  }\n\n  /**\n   * @param provider From an unlocked wallet. (e.g. Metamask)\n   * @param account An address of unlocked wallet account.\n   */\n  unlockWallet(provider: any, account: string) {\n    const newProvider = new ethers.providers.Web3Provider(provider, this.config.chainId);\n    this.signer = newProvider.getSigner(0);\n    this.myAccount = account;\n    for (const [name, contract] of Object.entries(this.contracts)) {\n      this.contracts[name] = contract.connect(this.signer);\n    }\n    const tokens = [this.BOMB, this.BSHARE, this.BBOND, ...Object.values(this.externalTokens)];\n    for (const token of tokens) {\n      token.connect(this.signer);\n    }\n    this.BOMBBTCB_LP = this.BOMBBTCB_LP.connect(this.signer);\n    console.log(`🔓 Wallet is unlocked. Welcome, ${account}!`);\n    this.fetchBoardroomVersionOfUser()\n      .then((version) => (this.boardroomVersionOfUser = version))\n      .catch((err) => {\n        console.error(`Failed to fetch boardroom version: ${err.stack}`);\n        this.boardroomVersionOfUser = 'latest';\n      });\n  }\n\n  get isUnlocked(): boolean {\n    return !!this.myAccount;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //===================FROM APE TO DISPLAY =========================\n  //=========================IN HOME PAGE==============================\n  //===================================================================\n\n  async getBombStat(): Promise<TokenStat> {\n    const { BombRewardPool, BombGenesisRewardPool } = this.contracts;\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombGenesisRewardPool.address);\n    const bombRewardPoolSupply2 = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply).sub(bombRewardPoolSupply2);\n    //  const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BOMB);\n    //const priceInBNBstring = priceInBNB.toString();\n    const priceInBTC = await this.getTokenPriceFromPancakeswapBTC(this.BOMB);\n    // const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    //const priceInDollars = await this.getTokenPriceFromPancakeswapBOMBUSD();\n    const priceOfBombInDollars = ((Number(priceInBTC) * Number(priceOfOneBTC)) / 10000).toFixed(2);\n    //console.log('priceOfBombInDollars', priceOfBombInDollars);\n\n    return {\n      //  tokenInFtm: (Number(priceInBNB) * 100).toString(),\n      tokenInFtm: priceInBTC.toString(),\n      priceInDollars: priceOfBombInDollars,\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBTCPriceUSD(): Promise<Number> {\n    const priceOfOneBTC = await this.getBTCBPriceFromPancakeswap();\n    return Number(priceOfOneBTC);\n  }\n\n  /**\n   * Calculates various stats for the requested LP\n   * @param name of the LP token to load stats for\n   * @returns\n   */\n  async getLPStat(name: string): Promise<LPStat> {\n    // console.log('NAME', name);\n\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    // console.log('NAME', name);\n\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const ftmAmountBN = await this.BNB.balanceOf(lpToken.address);\n    const ftmAmount = getDisplayBalance(ftmAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(ftmAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  async getLPStatBTC(name: string): Promise<LPStat> {\n    const lpToken = this.externalTokens[name];\n    const lpTokenSupplyBN = await lpToken.totalSupply();\n    const lpTokenSupply = getDisplayBalance(lpTokenSupplyBN, 18);\n    const token0 = name.startsWith('BOMB') ? this.BOMB : this.BSHARE;\n    const isBomb = name.startsWith('BOMB');\n    const tokenAmountBN = await token0.balanceOf(lpToken.address);\n    const tokenAmount = getDisplayBalance(tokenAmountBN, 18);\n\n    const btcAmountBN = await this.BTC.balanceOf(lpToken.address);\n    const btcAmount = getDisplayBalance(btcAmountBN, 18);\n    const tokenAmountInOneLP = Number(tokenAmount) / Number(lpTokenSupply);\n    const ftmAmountInOneLP = Number(btcAmount) / Number(lpTokenSupply);\n    const lpTokenPrice = await this.getLPTokenPrice(lpToken, token0, isBomb);\n\n    const lpTokenPriceFixed = Number(lpTokenPrice).toFixed(2).toString();\n\n    const liquidity = (Number(lpTokenSupply) * Number(lpTokenPrice)).toFixed(2).toString();\n\n    return {\n      tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      ftmAmount: ftmAmountInOneLP.toFixed(5).toString(),\n      priceOfOne: lpTokenPriceFixed,\n      totalLiquidity: liquidity,\n      totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n  /**\n   * Use this method to get price for Bomb\n   * @returns TokenStat for BBOND\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getBondStat(): Promise<TokenStat> {\n    const { Treasury } = this.contracts;\n    const bombStat = await this.getBombStat();\n    const bondBombRatioBN = await Treasury.getBondPremiumRate();\n    const modifier = bondBombRatioBN / 1e14 > 1 ? bondBombRatioBN / 1e14 : 1;\n    const bondPriceInBNB = (Number(bombStat.tokenInFtm) * modifier).toFixed(4);\n    const priceOfBBondInDollars = (Number(bombStat.priceInDollars) * modifier).toFixed(4);\n    const supply = await this.BBOND.displayedTotalSupply();\n    return {\n      tokenInFtm: bondPriceInBNB,\n      priceInDollars: priceOfBBondInDollars,\n      totalSupply: supply,\n      circulatingSupply: supply,\n    };\n  }\n\n  /**\n   * @returns TokenStat for BSHARE\n   * priceInBNB\n   * priceInDollars\n   * TotalSupply\n   * CirculatingSupply (always equal to total supply for bonds)\n   */\n  async getShareStat(): Promise<TokenStat> {\n    const { BShareRewardPool } = this.contracts;\n\n    const supply = await this.BSHARE.totalSupply();\n\n    const priceInBNB = await this.getTokenPriceFromPancakeswap(this.BSHARE);\n    const bombRewardPoolSupply = await this.BSHARE.balanceOf(BShareRewardPool.address);\n    const tShareCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    const priceOfOneBNB = await this.getWBNBPriceFromPancakeswap();\n    const priceOfSharesInDollars = (Number(priceInBNB) * Number(priceOfOneBNB)).toFixed(2);\n\n    return {\n      tokenInFtm: priceInBNB,\n      priceInDollars: priceOfSharesInDollars,\n      totalSupply: getDisplayBalance(supply, this.BSHARE.decimal, 0),\n      circulatingSupply: getDisplayBalance(tShareCirculatingSupply, this.BSHARE.decimal, 0),\n    };\n  }\n\n  async getBombStatInEstimatedTWAP(): Promise<TokenStat> {\n    const { Oracle, BombRewardPool } = this.contracts;\n    const expectedPrice = await Oracle.twap(this.BOMB.address, ethers.utils.parseEther('10000'));\n\n    const supply = await this.BOMB.totalSupply();\n    const bombRewardPoolSupply = await this.BOMB.balanceOf(BombRewardPool.address);\n    const bombCirculatingSupply = supply.sub(bombRewardPoolSupply);\n    return {\n      tokenInFtm: getDisplayBalance(expectedPrice),\n      priceInDollars: getDisplayBalance(expectedPrice),\n      totalSupply: getDisplayBalance(supply, this.BOMB.decimal, 0),\n      circulatingSupply: getDisplayBalance(bombCirculatingSupply, this.BOMB.decimal, 0),\n    };\n  }\n\n  async getBombPriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBombUpdatedPrice();\n  }\n\n  // async getBombPegTWAP(): Promise<any> {\n  //   const { Treasury } = this.contracts;\n  //   const updatedPrice = Treasury.getBombUpdatedPrice();\n  //   const updatedPrice2 = updatedPrice * 10000;\n  //   return updatedPrice2;\n  // }\n\n  async getBondsPurchasable(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    // const burnableBomb = (Number(Treasury.getBurnableBombLeft()) * 1000).toFixed(2).toString();\n    return Treasury.getBurnableBombLeft();\n  }\n\n  async getBombMaxiStats(poolId: string): Promise<MaxiInfo> {\n    const BombMaxi = await bombMaxi(poolId);\n    return {\n      totalShares: BombMaxi.data.pool.totalShares.toString(),\n      totalLiquidity: BombMaxi.data.pool.totalLiquidity.toString(),\n\n      // tokenAmount: tokenAmountInOneLP.toFixed(2).toString(),\n      // ftmAmount: ftmAmountInOneLP.toFixed(2).toString(),\n      // priceOfOne: lpTokenPriceFixed,\n      // totalLiquidity: liquidity,\n      // totalSupply: Number(lpTokenSupply).toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Calculates the TVL, APR and daily APR of a provided pool/bank\n   * @param bank\n   * @returns\n   */\n  async getPoolAPRs(bank: Bank): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    let depositToken = bank.depositToken;\n    // if (depositToken.symbol === '80BOMB-20BTCB-LP' || depositToken.symbol === '80BSHARE-20WBNB-LP') {\n    //   const temp = 'TBD';\n    //   return {\n    //     dailyAPR: temp,\n    //     yearlyAPR: temp,\n    //     TVL: temp,\n    //   };\n    // }\n    const poolContract = this.contracts[bank.contract];\n    let depositTokenValue: ERC20\n    if (bank.depositTokenName === \"BBOND\") {\n      depositTokenValue = this.BOMB\n    } else {\n      depositTokenValue = depositToken\n    }\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bank.depositTokenName, depositTokenValue);\n    const stakeInPool = await depositToken.balanceOf(bank.address);\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const stat = bank.earnTokenName === 'BOMB' ? await this.getBombStat() : await this.getShareStat();\n    const tokenPerSecond = await this.getTokenPerSecond(\n      bank.earnTokenName,\n      bank.contract,\n      poolContract,\n      bank.depositTokenName,\n    );\n\n    const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    const totalRewardPricePerYear =\n      Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    const totalStakingTokenInPool =\n      Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  async getXbombAPR(): Promise<PoolStats> {\n    if (this.myAccount === undefined) return;\n    const bombToken = this.BOMB;\n    const xbombToken = this.XBOMB;\n\n    const xbombExchange = await this.getXbombExchange();\n    const xbombPercent = await xbombExchange;\n    const xbombPercentTotal = (Number(xbombPercent) / 1000000000000000000) * 100 - 100;\n\n    const depositTokenPrice = await this.getDepositTokenPriceInDollars(bombToken.symbol, bombToken);\n\n    const stakeInPool = await bombToken.balanceOf(xbombToken.address);\n\n    const TVL = Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, bombToken.decimal));\n\n    const startDate = new Date('January 24, 2022');\n    const nowDate = new Date(Date.now());\n    const difference = nowDate.getTime() - startDate.getTime();\n    const days = difference / 60 / 60 / 24 / 1000;\n    const aprPerDay = xbombPercentTotal / days;\n\n    // Determine days between now and a date\n\n    // const tokenPerHour = tokenPerSecond.mul(60).mul(60);\n    // const totalRewardPricePerYear =\n    //   Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24).mul(365)));\n    // const totalRewardPricePerDay = Number(stat.priceInDollars) * Number(getDisplayBalance(tokenPerHour.mul(24)));\n    // const totalStakingTokenInPool =\n    //   Number(depositTokenPrice) * Number(getDisplayBalance(stakeInPool, depositToken.decimal));\n    // const dailyAPR = (totalRewardPricePerDay / totalStakingTokenInPool) * 100;\n    // const yearlyAPR = (totalRewardPricePerYear / totalStakingTokenInPool) * 100;\n\n    const dailyAPR = aprPerDay;\n    const yearlyAPR = aprPerDay * 365;\n    return {\n      dailyAPR: dailyAPR.toFixed(2).toString(),\n      yearlyAPR: yearlyAPR.toFixed(2).toString(),\n      TVL: TVL.toFixed(2).toString(),\n    };\n  }\n\n  /**\n   * Method to return the amount of tokens the pool yields per second\n   * @param earnTokenName the name of the token that the pool is earning\n   * @param contractName the contract of the pool/bank\n   * @param poolContract the actual contract of the pool\n   * @returns\n   */\n  async getTokenPerSecond(\n    earnTokenName: string,\n    contractName: string,\n    poolContract: Contract,\n    depositTokenName: string,\n  ) {\n    if (earnTokenName === 'BOMB') {\n      if (!contractName.endsWith('BombRewardPool')) {\n        const rewardPerSecond = await poolContract.tSharePerSecond();\n        if (depositTokenName === 'WBNB') {\n          return rewardPerSecond.mul(6000).div(11000).div(24);\n        } else if (depositTokenName === 'CAKE') {\n          return rewardPerSecond.mul(2500).div(11000).div(24);\n        } else if (depositTokenName === 'SUSD') {\n          return rewardPerSecond.mul(1000).div(11000).div(24);\n        } else if (depositTokenName === 'SVL') {\n          return rewardPerSecond.mul(1500).div(11000).div(24);\n        }\n        return rewardPerSecond.div(24);\n      }\n      const poolStartTime = await poolContract.poolStartTime();\n      const startDateTime = new Date(poolStartTime.toNumber() * 1000);\n      const FOUR_DAYS = 4 * 24 * 60 * 60 * 1000;\n      if (Date.now() - startDateTime.getTime() > FOUR_DAYS) {\n        return await poolContract.epochBombPerSecond(1);\n      }\n      return await poolContract.epochBombPerSecond(0);\n    }\n    const rewardPerSecond = await poolContract.tSharePerSecond();\n    if (depositTokenName.startsWith('BOMB-BTCB')) {\n      return rewardPerSecond.mul(400).div(1000);\n    } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BOMB')) {\n      return rewardPerSecond.mul(0).div(1000);\n    } else if (depositTokenName.startsWith('BBOND')) {\n      return rewardPerSecond.mul(150).div(1000);\n    } else if (depositTokenName.startsWith('BUSM-BUSD')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else if (depositTokenName.startsWith('80BOMB')) {\n      return rewardPerSecond.mul(200).div(1000);\n    } else if (depositTokenName.startsWith('80BSHARE')) {\n      return rewardPerSecond.mul(50).div(1000);\n    } else {\n      return rewardPerSecond.mul(150).div(1000);\n    }\n    // if (depositTokenName.startsWith('BOMB-BTCB')) {\n    //   return rewardPerSecond.mul(41650).div(10000);\n    // } else if (depositTokenName.startsWith('BOMB-BSHARE')) {\n    //   return rewardPerSecond.mul(0).div(119000);\n    // } else if (depositTokenName.startsWith('BOMB')) {\n    //   return rewardPerSecond.mul(59500).div(10000);\n    // } else {\n    //   return rewardPerSecond.mul(17850).div(10000);\n    // }\n  }\n\n  /**\n   * Method to calculate the tokenPrice of the deposited asset in a pool/bank\n   * If the deposited token is an LP it will find the price of its pieces\n   * @param tokenName\n   * @param pool\n   * @param token\n   * @returns\n   */\n  async getDepositTokenPriceInDollars(tokenName: string, token: ERC20) {\n    let tokenPrice;\n    const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n    if (tokenName === 'WBNB') {\n      tokenPrice = priceOfOneFtmInDollars;\n    } else {\n      if (tokenName === 'BOMB-BTCB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n      } else if (tokenName === 'BSHARE-BNB-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BOMB-BSHARE-LP') {\n        tokenPrice = await this.getLPTokenPrice(token, this.BOMB, true);\n        // } else if (tokenName === 'BSHARE-BNB-APELP') {\n        //   tokenPrice = await this.getLPTokenPrice(token, this.BSHARE, false);\n      } else if (tokenName === 'BUSM-BUSD-LP') {\n        tokenPrice = await this.getBusdLPTokenPrice(token, this.BUSM, true);\n      } else if (tokenName === '80BOMB-20BTCB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0xd6f52e8ab206e59a1e13b3d6c5b7f31e90ef46ef000200000000000000000028',\n        );\n      } else if (tokenName === '80BSHARE-20WBNB-LP') {\n        tokenPrice = await this.getMaxiLPTokenPrice(\n          '0x2c374ed1575e5c2c02c569f627299e902a1972cb000200000000000000000027',\n        );\n      }\n      else if (tokenName === 'BBOND') {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(this.BOMB);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n\n\n      } else {\n        tokenPrice = await this.getTokenPriceFromPancakeswap(token);\n        tokenPrice = (Number(tokenPrice) * Number(priceOfOneFtmInDollars)).toString();\n      }\n    }\n    //console.log({ tokenPrice });\n    return tokenPrice;\n  }\n\n  //===================================================================\n  //===================== GET ASSET STATS =============================\n  //=========================== END ===================================\n  //===================================================================\n\n  async getCurrentEpoch(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.epoch();\n  }\n\n  async getBondOraclePriceInLastTWAP(): Promise<BigNumber> {\n    const { Treasury } = this.contracts;\n    return Treasury.getBondPremiumRate();\n  }\n\n  /**\n   * Buy bonds with cash.\n   * @param amount amount of cash to purchase bonds with.\n   */\n  async buyBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const treasuryBombPrice = await Treasury.getBombPrice();\n    return await Treasury.buyBonds(decimalToBalance(amount), treasuryBombPrice);\n  }\n\n  /**\n   * Redeem bonds for cash.\n   * @param amount amount of bonds to redeem.\n   */\n  async redeemBonds(amount: string | number): Promise<TransactionResponse> {\n    const { Treasury } = this.contracts;\n    const priceForBomb = await Treasury.getBombPrice();\n\n    return await Treasury.redeemBonds(decimalToBalance(amount), priceForBomb);\n  }\n\n  async getTotalValueLocked(): Promise<Number> {\n    let totalValue = 0;\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      const pool = this.contracts[bankInfo.contract];\n      const token = this.externalTokens[bankInfo.depositTokenName];\n      const tokenPrice = await this.getDepositTokenPriceInDollars(bankInfo.depositTokenName, token);\n      const tokenAmountInPool = await token.balanceOf(pool.address);\n      const value = Number(getDisplayBalance(tokenAmountInPool, token.decimal)) * Number(tokenPrice);\n      const poolValue = Number.isNaN(value) ? 0 : value;\n      totalValue += poolValue;\n    }\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(this.currentBoardroom().address);\n    const bombStakeBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const bombTVL = Number(getDisplayBalance(bombStakeBalanceOf, this.BOMB.decimal)) * Number(BOMBPrice);\n\n    return totalValue + boardroomTVL + bombTVL;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceOfToken = stat.priceInDollars;\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  /**\n   * Calculates the price of an LP token\n   * Reference https://github.com/DefiDebauchery/discordpricebot/blob/4da3cdb57016df108ad2d0bb0c91cd8dd5f9d834/pricebot/pricebot.py#L150\n   * @param lpToken the token under calculation\n   * @param token the token pair used as reference (the other one would be BNB in most cases)\n   * @param isBomb sanity check for usage of bomb token or tShare\n   * @returns price of the LP token\n   */\n  async getBusdLPTokenPrice(lpToken: ERC20, token: ERC20, isBomb: boolean): Promise<string> {\n    const totalSupply = getFullDisplayBalance(await lpToken.totalSupply(), lpToken.decimal);\n    //Get amount of tokenA\n    const tokenSupply = getFullDisplayBalance(await token.balanceOf(lpToken.address), token.decimal);\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n    const priceToken = await this.getTokenPriceFromPancakeswapBUSD(this.BUSM);\n    const priceOfToken = Number(priceToken);\n    const tokenInLP = Number(tokenSupply) / Number(totalSupply);\n    const tokenPrice = (Number(priceOfToken) * tokenInLP * 2) //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async getMaxiLPTokenPrice(maxiPool: string): Promise<string> {\n    const bombmaxi = await this.getBombMaxiStats(maxiPool);\n    const totalShares = await bombmaxi.totalShares;\n    //Get amount of tokenA\n    const totalLiquidity = await bombmaxi.totalLiquidity;\n    // const stat = isBomb === true ? await this.getBombStat() : await this.getShareStat();\n\n    const tokenInLP = Number(totalLiquidity) / Number(totalShares);\n    const tokenPrice = tokenInLP //We multiply by 2 since half the price of the lp token is the price of each piece of the pair. So twice gives the total\n      .toString();\n    return tokenPrice;\n  }\n\n  async earnedFromBank(\n    poolName: ContractName,\n    earnTokenName: String,\n    poolId: Number,\n    account = this.myAccount,\n  ): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      if (earnTokenName === 'BOMB') {\n        return await pool.pendingBOMB(poolId, account);\n      } else {\n        return await pool.pendingShare(poolId, account);\n      }\n    } catch (err) {\n      console.error(`Failed to call pendingShare() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  async stakedBalanceOnBank(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<BigNumber> {\n    const pool = this.contracts[poolName];\n    try {\n      let userInfo = await pool.userInfo(poolId, account);\n      return await userInfo.amount;\n    } catch (err) {\n      console.error(`Failed to call userInfo() on pool ${pool.address}: ${err.stack}`);\n      return BigNumber.from(0);\n    }\n  }\n\n  /**\n   * Deposits token to given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async stake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.deposit(poolId, amount);\n  }\n\n  /**\n   * Withdraws token from given pool.\n   * @param poolName A name of pool contract.\n   * @param amount Number of tokens with decimals applied. (e.g. 1.45 DAI * 10^18)\n   * @returns {string} Transaction hash\n   */\n  async unstake(poolName: ContractName, poolId: Number, amount: BigNumber): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    return await pool.withdraw(poolId, amount);\n  }\n\n  /**\n   * Transfers earned token reward from given pool to my account.\n   */\n  async harvest(poolName: ContractName, poolId: Number): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    //By passing 0 as the amount, we are asking the contract to only redeem the reward and not the currently staked token\n    return await pool.withdraw(poolId, 0);\n  }\n\n  /**\n   * Harvests and withdraws deposited tokens from the pool.\n   */\n  async exit(poolName: ContractName, poolId: Number, account = this.myAccount): Promise<TransactionResponse> {\n    const pool = this.contracts[poolName];\n    let userInfo = await pool.userInfo(poolId, account);\n    return await pool.withdraw(poolId, userInfo.amount);\n  }\n\n  async fetchBoardroomVersionOfUser(): Promise<string> {\n    return 'latest';\n  }\n\n  currentBoardroom(): Contract {\n    if (!this.boardroomVersionOfUser) {\n      //throw new Error('you must unlock the wallet to continue.');\n    }\n    return this.contracts.Boardroom;\n  }\n\n  isOldBoardroomMember(): boolean {\n    return this.boardroomVersionOfUser !== 'latest';\n  }\n\n  async getTokenPriceFromPancakeswap(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { WBNB } = this.config.externalTokens;\n\n    const wftm = new Token(56, WBNB[0], WBNB[1], 'WBNB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBUSD(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    const { BUSD } = this.config.externalTokens;\n\n    const wftm = new Token(56, BUSD[0], BUSD[1], 'BUSD');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(wftm, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      return priceInBUSD.midPrice.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBTC(tokenContract: ERC20): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    // const {WBNB} = this.config.externalTokens;\n\n    // const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      //   console.log('priceInBUSDBTC', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n    }\n  }\n\n  async getTokenPriceFromPancakeswapBOMBUSD(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    //const { chainId } = this.config;\n    //const {WBNB} = this.config.externalTokens;\n\n    //  const wbnb = new Token(56, WBNB[0], WBNB[1]);\n    const btcb = new Token(56, this.BTC.address, this.BTC.decimal, 'BTCB', 'BTCB');\n    const token = new Token(56, this.BOMB.address, this.BOMB.decimal, this.BOMB.symbol);\n    try {\n      const wftmToToken = await Fetcher.fetchPairData(btcb, token, this.provider);\n      const priceInBUSD = new Route([wftmToToken], token);\n      // console.log('test', priceInBUSD.midPrice.toFixed(12));\n\n      const priceForPeg = Number(priceInBUSD.midPrice.toFixed(12)) * 10000;\n      return priceForPeg.toFixed(4);\n    } catch (err) {\n      console.error(`Failed to fetch token price of ${this.BOMB.symbol}: ${err}`);\n    }\n  }\n\n  // async getTokenPriceFromSpiritswap(tokenContract: ERC20): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { chainId } = this.config;\n\n  //   const { WBNB } = this.externalTokens;\n\n  //   const wftm = new TokenSpirit(chainId, WBNB.address, WBNB.decimal);\n  //   const token = new TokenSpirit(chainId, tokenContract.address, tokenContract.decimal, tokenContract.symbol);\n  //   try {\n  //     const wftmToToken = await FetcherSpirit.fetchPairData(wftm, token, this.provider);\n  //     const liquidityToken = wftmToToken.liquidityToken;\n  //     let ftmBalanceInLP = await WBNB.balanceOf(liquidityToken.address);\n  //     let ftmAmount = Number(getFullDisplayBalance(ftmBalanceInLP, WBNB.decimal));\n  //     let shibaBalanceInLP = await tokenContract.balanceOf(liquidityToken.address);\n  //     let shibaAmount = Number(getFullDisplayBalance(shibaBalanceInLP, tokenContract.decimal));\n  //     const priceOfOneFtmInDollars = await this.getWBNBPriceFromPancakeswap();\n  //     let priceOfShiba = (ftmAmount / shibaAmount) * Number(priceOfOneFtmInDollars);\n  //     return priceOfShiba.toString();\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of ${tokenContract.symbol}: ${err}`);\n  //   }\n  // }\n\n  async getWBNBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { WBNB, FUSDT } = this.externalTokens;\n    try {\n      const fusdt_wftm_lp_pair = this.externalTokens['USDT-BNB-LP'];\n      let ftm_amount_BN = await WBNB.balanceOf(fusdt_wftm_lp_pair.address);\n      let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, WBNB.decimal));\n      let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_wftm_lp_pair.address);\n      let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n      return (fusdt_amount / ftm_amount).toString();\n    } catch (err) {\n      console.error(`Failed to fetch token price of WBNB: ${err}`);\n    }\n  }\n\n  async getBTCBPriceFromPancakeswap(): Promise<string> {\n    const ready = await this.provider.ready;\n    if (!ready) return;\n    const { BTCB } = this.externalTokens;\n    try {\n      const btcPriceInBNB = await this.getTokenPriceFromPancakeswap(BTCB);\n\n      const wbnbPrice = await this.getWBNBPriceFromPancakeswap();\n\n      const btcprice = (Number(btcPriceInBNB) * Number(wbnbPrice)).toFixed(2).toString();\n      //console.log('btcprice', btcprice);\n      return btcprice;\n    } catch (err) {\n      console.error(`Failed to fetch token price of BTCB: ${err}`);\n    }\n  }\n\n  // async getBTCBPriceFromPancakeswap(): Promise<string> {\n  //   const ready = await this.provider.ready;\n  //   if (!ready) return;\n  //   const { BTCB, FUSDT } = this.externalTokens;\n  //   try {\n  //     const fusdt_btcb_lp_pair = this.externalTokens['USDT-BTCB-LP'];\n  //     let ftm_amount_BN = await BTCB.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let ftm_amount = Number(getFullDisplayBalance(ftm_amount_BN, BTCB.decimal));\n  //     let fusdt_amount_BN = await FUSDT.balanceOf(fusdt_btcb_lp_pair.address);\n  //     let fusdt_amount = Number(getFullDisplayBalance(fusdt_amount_BN, FUSDT.decimal));\n  //     console.log('BTCB price', (fusdt_amount / ftm_amount).toString());\n  //     return (fusdt_amount / ftm_amount).toString();\n  //     console.log('BTCB price');\n  //   } catch (err) {\n  //     console.error(`Failed to fetch token price of BTCB: ${err}`);\n  //   }\n  // }\n\n  //===================================================================\n  //===================================================================\n  //===================== MASONRY METHODS =============================\n  //===================================================================\n  //===================================================================\n\n  async getBoardroomAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BSHAREPrice = (await this.getShareStat()).priceInDollars;\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const boardroomtShareBalanceOf = await this.BSHARE.balanceOf(Boardroom.address);\n    const boardroomTVL = Number(getDisplayBalance(boardroomtShareBalanceOf, this.BSHARE.decimal)) * Number(BSHAREPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100) / boardroomTVL) * 365;\n    return realAPR;\n  }\n\n  async getBombStakeAPR() {\n    const Boardroom = this.currentBoardroom();\n    const latestSnapshotIndex = await Boardroom.latestSnapshotIndex();\n    const lastHistory = await Boardroom.boardroomHistory(latestSnapshotIndex);\n\n    const lastRewardsReceived = lastHistory[1];\n\n    const BOMBPrice = (await this.getBombStat()).priceInDollars;\n    const epochRewardsPerShare = lastRewardsReceived / 1e18;\n\n    //Mgod formula\n    const amountOfRewardsPerDay = epochRewardsPerShare * Number(BOMBPrice) * 4;\n    const xBombBombBalanceOf = await this.BOMB.balanceOf(this.XBOMB.address);\n    const bombTVL = Number(getDisplayBalance(xBombBombBalanceOf, this.XBOMB.decimal)) * Number(BOMBPrice);\n    const realAPR = ((amountOfRewardsPerDay * 100 * 0.2) / bombTVL) * 365;\n    return realAPR;\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserClaimRewardFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.canClaimReward(this.myAccount);\n  }\n\n  /**\n   * Checks if the user is allowed to retrieve their reward from the Boardroom\n   * @returns true if user can withdraw reward, false if they can't\n   */\n  async canUserUnstakeFromBoardroom(): Promise<boolean> {\n    const Boardroom = this.currentBoardroom();\n    const canWithdraw = await Boardroom.canWithdraw(this.myAccount);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    const notStaked = Number(getDisplayBalance(stakedAmount, this.BSHARE.decimal)) === 0;\n    const result = notStaked ? true : canWithdraw;\n    return result;\n  }\n\n  async timeUntilClaimRewardFromBoardroom(): Promise<BigNumber> {\n    // const Boardroom = this.currentBoardroom();\n    // const mason = await Boardroom.masons(this.myAccount);\n    return BigNumber.from(0);\n  }\n\n  async getTotalStakedInBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.totalSupply();\n  }\n\n  async stakeShareToBoardroom(amount: string): Promise<TransactionResponse> {\n    if (this.isOldBoardroomMember()) {\n      throw new Error(\"you're using old boardroom. please withdraw and deposit the BSHARE again.\");\n    }\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.stake(decimalToBalance(amount));\n  }\n\n  async stakeToBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.enter(decimalToBalance(amount));\n  }\n\n  async redeemFromBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BOMB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n\n  async redeemFromBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.redeem(\n      this.BBOMB_BTCB.address,\n      decimalToBalance(amount),\n      this.myAccount,\n      expiry.getTime(),\n      '0x',\n    );\n  }\n  async supplyToBtcb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BTCB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async supplyToBomb(amount: string): Promise<TransactionResponse> {\n    const BombRouter = this.contracts.BombRouter;\n    const expiry = new Date(Date.now() + 2880);\n    return await BombRouter.mint(this.BBOMB_BOMB.address, decimalToBalance(amount), this.myAccount, expiry.getTime());\n  }\n\n  async getStakedSharesOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getShareOf(this.myAccount);\n    }\n    return await Boardroom.balanceOf(this.myAccount);\n  }\n\n  async getStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.balanceOf(this.myAccount);\n  }\n\n  async getTotalStakedBomb(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const bomb = this.BOMB;\n    return await bomb.balanceOf(Xbomb.address);\n  }\n\n  async getTotalSuppliedBomb(): Promise<BigNumber> {\n    const bbombBomb = this.BOMB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBomb = await bbombBomb.totalBalance();\n    //  const borrowBomb = await bbombBomb.totalBorrows();\n    // const totalSupplied = totalBomb + borrowBomb;\n    return totalBomb;\n  }\n\n  async getTotalSuppliedBtcb(): Promise<BigNumber> {\n    const bbombBomb = this.BTCB_BORROWABLE;\n    // const bomb = this.BOMB;\n    const totalBtcb = await bbombBomb.totalBalance();\n    //const borrowBtcb = await bbombBomb.totalBorrows();\n    //  const totalSupplied = totalBtcb + borrowBtcb;\n    return totalBtcb;\n  }\n\n  async getXbombExchange(): Promise<BigNumber> {\n    const Xbomb = this.contracts.xBOMB;\n    const XbombExchange = await Xbomb.getExchangeRate();\n\n    const xBombPerBomb = parseFloat(XbombExchange) / 1000000000000000000;\n    const xBombRate = xBombPerBomb.toString();\n    return parseUnits(xBombRate, 18);\n  }\n\n  async withdrawFromBomb(amount: string): Promise<TransactionResponse> {\n    const Xbomb = this.contracts.xBOMB;\n    return await Xbomb.leave(decimalToBalance(amount));\n  }\n\n  async getEarningsOnBoardroom(): Promise<BigNumber> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.getCashEarningsOf(this.myAccount);\n    }\n    return await Boardroom.earned(this.myAccount);\n  }\n\n  async withdrawShareFromBoardroom(amount: string): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.withdraw(decimalToBalance(amount));\n  }\n\n  async harvestCashFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    if (this.boardroomVersionOfUser === 'v1') {\n      return await Boardroom.claimDividends();\n    }\n    return await Boardroom.claimReward();\n  }\n\n  async exitFromBoardroom(): Promise<TransactionResponse> {\n    const Boardroom = this.currentBoardroom();\n    return await Boardroom.exit();\n  }\n\n  async getTreasuryNextAllocationTime(): Promise<AllocationTime> {\n    const { Treasury } = this.contracts;\n    const nextEpochTimestamp: BigNumber = await Treasury.nextEpochPoint();\n    const nextAllocation = new Date(nextEpochTimestamp.mul(1000).toNumber());\n    const prevAllocation = new Date(Date.now());\n\n    return { from: prevAllocation, to: nextAllocation };\n  }\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to claim\n   * their reward from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserClaimRewardTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint(); //in unix timestamp\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const periodInHours = period / 60 / 60; // 6 hours, period is displayed in seconds which is 21600\n    const rewardLockupEpochs = await Boardroom.rewardLockupEpochs();\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(rewardLockupEpochs);\n\n    const fromDate = new Date(Date.now());\n    if (targetEpochForClaimUnlock - currentEpoch <= 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - currentEpoch - 1;\n      const endDate = moment(toDate)\n        .add(delta * periodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  /**\n   * This method calculates and returns in a from to to format\n   * the period the user needs to wait before being allowed to unstake\n   * from the boardroom\n   * @returns Promise<AllocationTime>\n   */\n  async getUserUnstakeTime(): Promise<AllocationTime> {\n    const { Boardroom, Treasury } = this.contracts;\n    const nextEpochTimestamp = await Boardroom.nextEpochPoint();\n    const currentEpoch = await Boardroom.epoch();\n    const mason = await Boardroom.members(this.myAccount);\n    const startTimeEpoch = mason.epochTimerStart;\n    const period = await Treasury.PERIOD();\n    const PeriodInHours = period / 60 / 60;\n    const withdrawLockupEpochs = await Boardroom.withdrawLockupEpochs();\n    const fromDate = new Date(Date.now());\n    const targetEpochForClaimUnlock = Number(startTimeEpoch) + Number(withdrawLockupEpochs);\n    const stakedAmount = await this.getStakedSharesOnBoardroom();\n    if (currentEpoch <= targetEpochForClaimUnlock && Number(stakedAmount) === 0) {\n      return { from: fromDate, to: fromDate };\n    } else if (targetEpochForClaimUnlock - currentEpoch === 1) {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      return { from: fromDate, to: toDate };\n    } else {\n      const toDate = new Date(nextEpochTimestamp * 1000);\n      const delta = targetEpochForClaimUnlock - Number(currentEpoch) - 1;\n      const endDate = moment(toDate)\n        .add(delta * PeriodInHours, 'hours')\n        .toDate();\n      return { from: fromDate, to: endDate };\n    }\n  }\n\n  async watchAssetInMetamask(assetName: string): Promise<boolean> {\n    const { ethereum } = window as any;\n    if (ethereum && ethereum.networkVersion === config.chainId.toString()) {\n      let asset;\n      let assetUrl;\n      if (assetName === 'BOMB') {\n        asset = this.BOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png';\n      } else if (assetName === 'BSHARE') {\n        asset = this.BSHARE;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bshare-512.png';\n      } else if (assetName === 'BBOND') {\n        asset = this.BBOND;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bbond-512.png';\n      } else if (assetName === 'XBOMB') {\n        asset = this.XBOMB;\n        assetUrl = 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/xbomb-512.png';\n      } else if (assetName === 'BTCB') {\n        asset = this.BTC;\n        assetUrl = 'https://bscscan.com/token/images/btcb_32.png';\n      }\n      await ethereum.request({\n        method: 'wallet_watchAsset',\n        params: {\n          type: 'ERC20',\n          options: {\n            address: asset.address,\n            symbol: asset.symbol,\n            decimals: 18,\n            image: assetUrl,\n          },\n        },\n      });\n    }\n    return true;\n  }\n\n  async provideBombFtmLP(ftmAmount: string, bombAmount: BigNumber): Promise<TransactionResponse> {\n    const { TaxOffice } = this.contracts;\n    let overrides = {\n      value: parseUnits(ftmAmount, 18),\n    };\n    return await TaxOffice.addLiquidityETHTaxFree(\n      bombAmount,\n      bombAmount.mul(992).div(1000),\n      parseUnits(ftmAmount, 18).mul(992).div(1000),\n      overrides,\n    );\n  }\n\n  async quoteFromSpooky(tokenAmount: string, tokenName: string): Promise<string> {\n    const { SpookyRouter } = this.contracts;\n    const { _reserve0, _reserve1 } = await this.BOMBBTCB_LP.getReserves();\n    let quote;\n    if (tokenName === 'BOMB') {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve0, _reserve1);\n    } else {\n      quote = await SpookyRouter.quote(parseUnits(tokenAmount), _reserve1, _reserve0);\n    }\n    return (quote / 1e18).toString();\n  }\n\n  /**\n   * @returns an array of the regulation events till the most up to date epoch\n   */\n  async listenForRegulationsEvents(): Promise<any> {\n    const { Treasury } = this.contracts;\n\n    const treasuryDaoFundedFilter = Treasury.filters.DaoFundFunded();\n    const treasuryDevFundedFilter = Treasury.filters.DevFundFunded();\n    const treasuryBoardroomFundedFilter = Treasury.filters.BoardroomFunded();\n    const boughtBondsFilter = Treasury.filters.BoughtBonds();\n    const redeemBondsFilter = Treasury.filters.RedeemedBonds();\n\n    let epochBlocksRanges: any[] = [];\n    let boardroomFundEvents = await Treasury.queryFilter(treasuryBoardroomFundedFilter);\n    var events: any[] = [];\n    boardroomFundEvents.forEach(function callback(value, index) {\n      events.push({ epoch: index + 1 });\n      events[index].boardroomFund = getDisplayBalance(value.args[1]);\n      if (index === 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n      }\n      if (index > 0) {\n        epochBlocksRanges.push({\n          index: index,\n          startBlock: value.blockNumber,\n          boughBonds: 0,\n          redeemedBonds: 0,\n        });\n        epochBlocksRanges[index - 1].endBlock = value.blockNumber;\n      }\n    });\n\n    epochBlocksRanges.forEach(async (value, index) => {\n      events[index].bondsBought = await this.getBondsWithFilterForPeriod(\n        boughtBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n      events[index].bondsRedeemed = await this.getBondsWithFilterForPeriod(\n        redeemBondsFilter,\n        value.startBlock,\n        value.endBlock,\n      );\n    });\n    let DEVFundEvents = await Treasury.queryFilter(treasuryDevFundedFilter);\n    DEVFundEvents.forEach(function callback(value, index) {\n      events[index].devFund = getDisplayBalance(value.args[1]);\n    });\n    let DAOFundEvents = await Treasury.queryFilter(treasuryDaoFundedFilter);\n    DAOFundEvents.forEach(function callback(value, index) {\n      events[index].daoFund = getDisplayBalance(value.args[1]);\n    });\n    return events;\n  }\n\n  /**\n   * Helper method\n   * @param filter applied on the query to the treasury events\n   * @param from block number\n   * @param to block number\n   * @returns the amount of bonds events emitted based on the filter provided during a specific period\n   */\n  async getBondsWithFilterForPeriod(filter: EventFilter, from: number, to: number): Promise<number> {\n    const { Treasury } = this.contracts;\n    const bondsAmount = await Treasury.queryFilter(filter, from, to);\n    return bondsAmount.length;\n  }\n\n  async estimateZapIn(tokenName: string, lpName: string, amount: string): Promise<number[]> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    let estimate;\n    if (tokenName === BNB_TICKER) {\n      estimate = await zapper.estimateZapIn(lpToken.address, SPOOKY_ROUTER_ADDR, parseUnits(amount, 18));\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      estimate = await zapper.estimateZapInToken(\n        token.address,\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        parseUnits(amount, 18),\n      );\n    }\n    return [estimate[0] / 1e18, estimate[1] / 1e18];\n  }\n  async zapIn(tokenName: string, lpName: string, amount: string): Promise<TransactionResponse> {\n    const { zapper } = this.contracts;\n    const lpToken = this.externalTokens[lpName];\n    if (tokenName === BNB_TICKER) {\n      let overrides = {\n        value: parseUnits(amount, 18),\n      };\n      return await zapper.zapIn(lpToken.address, SPOOKY_ROUTER_ADDR, this.myAccount, overrides);\n    } else {\n      const token = tokenName === BOMB_TICKER ? this.BOMB : this.BSHARE;\n      return await zapper.zapInToken(\n        token.address,\n        parseUnits(amount, 18),\n        lpToken.address,\n        SPOOKY_ROUTER_ADDR,\n        this.myAccount,\n      );\n    }\n  }\n  async swapBBondToBShare(bbondAmount: BigNumber): Promise<TransactionResponse> {\n    const { BShareSwapper } = this.contracts;\n    return await BShareSwapper.swapBBondToBShare(bbondAmount);\n  }\n  async estimateAmountOfBShare(bbondAmount: string): Promise<string> {\n    const { BShareSwapper } = this.contracts;\n    try {\n      const estimateBN = await BShareSwapper.estimateAmountOfBShare(parseUnits(bbondAmount, 18));\n      return getDisplayBalance(estimateBN, 18, 6);\n    } catch (err) {\n      console.error(`Failed to fetch estimate bshare amount: ${err}`);\n    }\n  }\n\n  async getBShareSwapperStat(address: string): Promise<BShareSwapperStat> {\n    const { BShareSwapper } = this.contracts;\n    const bshareBalanceBN = await BShareSwapper.getBShareBalance();\n    const bbondBalanceBN = await BShareSwapper.getBBondBalance(address);\n    // const bombPriceBN = await BShareSwapper.getBombPrice();\n    // const bsharePriceBN = await BShareSwapper.getBSharePrice();\n    const rateBSharePerBombBN = await BShareSwapper.getBShareAmountPerBomb();\n    const bshareBalance = getDisplayBalance(bshareBalanceBN, 18, 5);\n    const bbondBalance = getDisplayBalance(bbondBalanceBN, 18, 5);\n    return {\n      bshareBalance: bshareBalance.toString(),\n      bbondBalance: bbondBalance.toString(),\n      // bombPrice: bombPriceBN.toString(),\n      // bsharePrice: bsharePriceBN.toString(),\n      rateBSharePerBomb: rateBSharePerBombBN.toString(),\n    };\n  }\n}\n","import React, {createContext, useEffect, useState} from 'react';\nimport {useWallet} from 'use-wallet';\nimport BombFinance from '../../bomb-finance';\nimport config from '../../config';\n\nexport interface BombFinanceContext {\n  bombFinance?: BombFinance;\n}\n\nexport const Context = createContext<BombFinanceContext>({bombFinance: null});\n\nexport const BombFinanceProvider: React.FC = ({children}) => {\n  const {ethereum, account} = useWallet();\n  const [bombFinance, setBombFinance] = useState<BombFinance>();\n\n  useEffect(() => {\n    if (!bombFinance) {\n      const bomb = new BombFinance(config);\n      if (account) {\n        // wallet was unlocked at initialization\n        bomb.unlockWallet(ethereum, account);\n      }\n      setBombFinance(bomb);\n    } else if (account) {\n      bombFinance.unlockWallet(ethereum, account);\n    }\n  }, [account, ethereum, bombFinance]);\n\n  return <Context.Provider value={{bombFinance}}>{children}</Context.Provider>;\n};\n","import {BigNumber} from 'ethers';\n\nexport const getDisplayBalance = (\n  balance: BigNumber,\n  decimals = 18,\n  fractionDigits = 4,\n  isTruncated: boolean = false,\n) => {\n  if (decimals === 0) {\n    fractionDigits = 0;\n  }\n  const number = getBalance(balance, decimals - fractionDigits);\n  const ret = (number / 10 ** fractionDigits).toFixed(fractionDigits);\n  if (ret.length > 12 && isTruncated) {\n    return ret.slice(0, 12) + '...';\n  }\n  return ret;\n};\n\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, isTruncated = false) => {\n  return getDisplayBalance(balance, decimals, 4, isTruncated);\n};\n\nexport function getBalance(balance: BigNumber, decimals = 18): number {\n  return Number(balance.div(BigNumber.from(10).pow(decimals)));\n}\n","import {useContext} from 'react';\nimport {Context} from '../contexts/BombFinanceProvider';\n\nconst useBombFinance = () => {\n  const {bombFinance} = useContext(Context);\n  return bombFinance;\n};\n\nexport default useBombFinance;\n","import {createContext} from 'react';\nimport {Bank} from '../../bomb-finance';\n\nexport interface BanksContext {\n  banks: Bank[];\n}\n\nconst context = createContext<BanksContext>({\n  banks: [],\n});\n\nexport default context;\n","import React, {useCallback, useEffect, useState} from 'react';\nimport Context from './context';\nimport useBombFinance from '../../hooks/useBombFinance';\nimport {Bank} from '../../bomb-finance';\nimport config, {bankDefinitions} from '../../config';\n\nconst Banks: React.FC = ({children}) => {\n  const [banks, setBanks] = useState<Bank[]>([]);\n  const bombFinance = useBombFinance();\n  const isUnlocked = bombFinance?.isUnlocked;\n\n  const fetchPools = useCallback(async () => {\n    const banks: Bank[] = [];\n\n    for (const bankInfo of Object.values(bankDefinitions)) {\n      if (bankInfo.finished) {\n        if (!bombFinance.isUnlocked) continue;\n\n        // only show pools staked by user\n        const balance = await bombFinance.stakedBalanceOnBank(\n          bankInfo.contract,\n          bankInfo.poolId,\n          bombFinance.myAccount,\n        );\n        if (balance.lte(0)) {\n          continue;\n        }\n      }\n      banks.push({\n        ...bankInfo,\n        address: config.deployments[bankInfo.contract].address,\n        depositToken: bombFinance.externalTokens[bankInfo.depositTokenName],\n        earnToken: bankInfo.earnTokenName === 'BOMB' ? bombFinance.BOMB : bombFinance.BSHARE,\n      });\n    }\n    banks.sort((a, b) => (a.sort > b.sort ? 1 : -1));\n    setBanks(banks);\n  }, [bombFinance, setBanks]);\n\n  useEffect(() => {\n    if (bombFinance) {\n      fetchPools().catch((err) => console.error(`Failed to fetch pools: ${err.stack}`));\n    }\n  }, [isUnlocked, bombFinance, fetchPools]);\n\n  return <Context.Provider value={{banks}}>{children}</Context.Provider>;\n};\n\nexport default Banks;\n","import { useEffect, useState } from 'react';\nimport config from './../config';\n\n/**\n * For more read https://github.com/NoahZinsmeister/web3-react/blob/6737868693adb7e1e28ae80499e19901e9aae45a/example/hooks.ts#L33\n * And https://docs.metamask.io/guide/ethereum-provider.html\n * @param provider ethereum provider in this case is the window.ethereum available due to metamask being installed\n * @returns\n */\nexport const connectToNetwork = async (provider: any) => {\n  await provider.request({\n    method: 'wallet_addEthereumChain',\n    params: [\n      {\n        chainId: `0x${config.chainId.toString(16)}`,\n        chainName: config.networkName,\n        nativeCurrency: {\n          name: 'BNB',\n          symbol: 'BNB',\n          decimals: 18,\n        },\n        rpcUrls: ['https://rpc.ankr.com/bsc'],\n        blockExplorerUrls: [config.ftmscanUrl],\n      },\n    ],\n  });\n};\n\nconst usePromptNetwork = () => {\n  const [networkPrompt, setNetworkPrompt] = useState(false);\n  const { ethereum } = window as any;\n\n  useEffect(() => {\n    if (!networkPrompt) {\n      if (ethereum && ethereum.networkVersion !== config.chainId.toString()) {\n        connectToNetwork(ethereum);\n        setNetworkPrompt(true);\n      }\n    }\n  }, [networkPrompt, ethereum]);\n};\n\nexport default usePromptNetwork;\n","import { Configuration } from './bomb-finance/config';\nimport { BankInfo } from './bomb-finance';\n\nconst configurations: { [env: string]: Configuration } = {\n  // development: {\n  //   chainId: 97,\n  //   networkName: 'BSC Testnet',\n  //   ftmscanUrl: 'https://testnet.bscscan.com/',\n  //   defaultProvider: 'https://data-seed-prebsc-1-s1.binance.org:8545/',\n  //   deployments: require('./bomb-finance/deployments/deployments.testing.json'),\n  //   externalTokens: {\n  //     WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\n  //     FUSDT: ['0x55d398326f99059fF775485246999027B3197955', 18], // This is actually BUSD on mainnet not fusdt\n  //     BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\n  //     ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\n  //     SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\n  //     'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\n  //     'BOMB-BTCB-LP': ['0x2A651563C9d3Af67aE0388a5c8F89b867038089e', 18],\n  //     'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\n  //   },\n  //   baseLaunchDate: new Date('2021-11-21 1:00:00Z'),\n  //   bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n  //   boardroomLaunchesAt: new Date('2020-12-11T00:00:00Z'),\n  //   refreshInterval: 10000,\n  // },\n  development: {\n    chainId: 56,\n    networkName: 'BSC Mainnet',\n    ftmscanUrl: 'https://bscscan.com',\n    defaultProvider: 'https://rpc.ankr.com/bsc',\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\n      BUSM: ['0x6216B17f696B14701E17BCB24Ec14430261Be94A', 18],\n      BOMB: ['0x522348779DCb2911539e76A1042aA922F9C47Ee3', 18],\n      '80BOMB-20BTCB-LP': ['0xd6F52e8AB206e59A1E13b3D6c5B7f31E90ef46EF', 18],\n      '80BSHARE-20WBNB-LP': ['0x2C374eD1575e5C2C02c569f627299E902A1972cb', 18],\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\n      'BUSM-BUSD-LP': ['0xEe46Bd06a8876c3cc86027dc7D2Df19af513cD12', 18],\n      BBOND: ['0xDA1d9C79240003195d0a67f202efcCCC3F78b994', 18],\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\n    },\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n  production: {\n    chainId: 56,\n    networkName: 'BSC Mainnet',\n    ftmscanUrl: 'https://bscscan.com',\n    defaultProvider: 'https://rpc.ankr.com/bsc/45201ee6b17d73e401be85a55927da2fb732de7e15051ef8f281ec1cdc888ba8',\n    deployments: require('./bomb-finance/deployments/deployments.mainnet.json'),\n    externalTokens: {\n      WBNB: ['0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18],\n      FUSDT: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18], // This is actually BUSD on mainnet not fusdt\n      BTCB: ['0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c', 18],\n      BBOND: ['0xDA1d9C79240003195d0a67f202efcCCC3F78b994', 18],\n      SBTC: ['0x1d28cd41fc594232D05F2AbdAFBb556E7F78Dc2a', 18],\n      'BBOMB-BOMB': ['0xcB72214d09a1804E4eecA9C3F3bB6ca49460237b', 18],\n      'BBOMB-BTCB': ['0x23EFC2ff90e3423c3F84352b21b49FBcD4C3E32D', 18],\n      SVL: ['0x37F14E7c2FadC2A01dBD93b8a1F69D41c6c3d554', 18],\n      BUSM: ['0x6216B17f696B14701E17BCB24Ec14430261Be94A', 18],\n      BUSD: ['0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56', 18],\n      SUSD: ['0x12017c89444624C0268A1053467e22954F4fd362', 18],\n      CAKE: ['0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82', 18],\n      ZOO: ['0x09e145a1d53c0045f41aeef25d8ff982ae74dd56', 0],\n      SHIBA: ['0x9ba3e4f84a34df4e08c112e1a0ff148b81655615', 9],\n      BOMB: ['0x522348779DCb2911539e76A1042aA922F9C47Ee3', 18],\n      '80BOMB-20BTCB-LP': ['0xd6F52e8AB206e59A1E13b3D6c5B7f31E90ef46EF', 18],\n      '80BSHARE-20WBNB-LP': ['0x2C374eD1575e5C2C02c569f627299E902A1972cb', 18],\n      'USDT-BNB-LP': ['0x58F876857a02D6762E0101bb5C46A8c1ED44Dc16', 18],\n      'USDT-BTCB-LP': ['0x3f803ec2b816ea7f06ec76aa2b6f2532f9892d62', 18],\n      'BOMB-BTCB-LP': ['0x84392649eb0bC1c1532F2180E58Bae4E1dAbd8D6', 18],\n      'BUSM-BUSD-LP': ['0xEe46Bd06a8876c3cc86027dc7D2Df19af513cD12', 18],\n      'BOMB-BSHARE-LP': ['0x54f9fE531224Fa43Feb218B20ABa84d22a8fDc0C', 18],\n      'BOMB-BNB-LP': ['0x107CDC0c46615C63EE4abC4E1e264D3BD12390e6', 18],\n      'BSHARE-BNB-LP': ['0x1303246855b5B5EbC71F049Fdb607494e97218f8', 18],\n      'BSHARE-BNB-APELP': ['0x0dE2a71b2f43CF588A00422d41E1C02D0E08D552', 18],\n      'BOMB-BTCB-APELP': ['0xB6E85031F313563bF12ea414118978C8BD78db5D', 18],\n    },\n    baseLaunchDate: new Date('2021-11-20 1:00:00Z'),\n    bondLaunchesAt: new Date('2020-12-03T15:00:00Z'),\n    boardroomLaunchesAt: new Date('2021-11-20T00:00:00Z'),\n    refreshInterval: 10000,\n  },\n};\n\nexport const bankDefinitions: { [contractName: string]: BankInfo } = {\n  /*\n  Explanation:\n  name: description of the card\n  poolId: the poolId assigned in the contract\n  sectionInUI: way to distinguish in which of the 3 pool groups it should be listed\n        - 0 = Single asset stake pools\n        - 1 = LP asset staking rewarding BOMB\n        - 2 = LP asset staking rewarding BSHARE\n  contract: the contract name which will be loaded from the deployment.environmnet.json\n  depositTokenName : the name of the token to be deposited\n  earnTokenName: the rewarded token\n  finished: will disable the pool on the UI if set to true\n  sort: the order of the pool\n  */\n  // BombBTCApeLPBombRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BTCB Ape LP',\n  //   poolId: 2,\n  //   sectionInUI: 1,\n  //   contract: 'BombBTCApeLPBombRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-APELP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 2,\n  //   closedForStaking: true,\n  // },\n  // BombBTCLPBombRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BTC LP',\n  //   poolId: 0,\n  //   sectionInUI: 1,\n  //   contract: 'BombBTCLPBombRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 7,\n  //   closedForStaking: true,\n  // },\n  // BombCakeRewardPool: {\n  //   name: 'Earn BOMB by CAKE',\n  //   poolId: 0,\n  //   sectionInUI: 0,\n  //   contract: 'BombCAKERewardPool',\n  //   depositTokenName: 'CAKE',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 3,\n  //   closedForStaking: true,\n  // },\n  BombSBTCRewardPool: {\n    name: 'Earn BOMB by SBTC',\n    poolId: 2,\n    sectionInUI: 0,\n    contract: 'BombSBTCRewardPool',\n    depositTokenName: 'SBTC',\n    earnTokenName: 'BOMB',\n    finished: true,\n    sort: 4,\n    closedForStaking: true,\n  },\n  BombSUSDRewardPool: {\n    name: 'Earn BOMB by SUSD',\n    poolId: 1,\n    sectionInUI: 0,\n    contract: 'BombSUSDRewardPool',\n    depositTokenName: 'SUSD',\n    earnTokenName: 'BOMB',\n    finished: true,\n    sort: 5,\n    closedForStaking: true,\n  },\n  // BombSVLRewardPool: {\n  //   name: 'Earn BOMB by SVL',\n  //   poolId: 3,\n  //   sectionInUI: 0,\n  //   contract: 'BombSVLRewardPool',\n  //   depositTokenName: 'SVL',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 6,\n  //   closedForStaking: true,\n  // },\n\n  // BombWBNBGenesisRewardPool: {\n  //   name: 'Earn BOMB by WBNB',\n  //   poolId: 4,\n  //   sectionInUI: 0,\n  //   contract: 'BombWBNBGenesisRewardPool',\n  //   depositTokenName: 'WBNB',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 1,\n  //   closedForStaking: true,\n  // },\n  // BombBnbLPRewardPool: {\n  //   name: 'Earn BOMB by BOMB-BNB LP',\n  //   poolId: 1,\n  //   sectionInUI: 1,\n  //   contract: 'BombBnbLPRewardPool',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 8,\n  //   closedForStaking: false,\n  // },\n  // BombShibaRewardPool: {\n  //   name: 'Earn BOMB by SHIBA',\n  //   poolId: 2,\n  //   sectionInUI: 0,\n  //   contract: 'BombShibaGenesisRewardPool',\n  //   depositTokenName: 'SHIBA',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 3,\n  //   closedForStaking: true,\n  // },\n  // BombZooRewardPool: {\n  //   name: 'Earn BOMB by ZOO',\n  //   poolId: 3,\n  //   sectionInUI: 0,\n  //   contract: 'BombZooGenesisRewardPool',\n  //   depositTokenName: 'ZOO',\n  //   earnTokenName: 'BOMB',\n  //   finished: false,\n  //   sort: 4,\n  //   closedForStaking: true,\n  // },\n\n  // BombFtmLPBombRewardPoolOld: {\n  //   name: 'Earn BOMB by BOMB-BNB LP',\n  //   poolId: 0,\n  //   sectionInUI: 1,\n  //   contract: 'BombFtmLpBombRewardPoolOld',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BOMB',\n  //   finished: true,\n  //   sort: 9,\n  //   closedForStaking: true,\n  // },\n  // BombFtmLPBShareRewardPool: {\n  //   name: 'Earn BSHARE by BOMB-BNB LP',\n  //   poolId: 0,\n  //   sectionInUI: 2,\n  //   contract: 'BombFtmLPBShareRewardPool',\n  //   depositTokenName: 'BOMB-BNB-LP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: false,\n  //   sort: 6,\n  //   closedForStaking: false,\n  // },\n  BombMaxiLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB Maxi LP',\n    poolId: 7,\n    sectionInUI: 2,\n    contract: 'BombMaxiLPBShareRewardPool',\n    depositTokenName: '80BOMB-20BTCB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 0,\n    closedForStaking: false,\n  },\n  BshareMaxiLPBShareRewardPool: {\n    name: 'Earn BSHARE by BSHARE Maxi LP',\n    poolId: 8,\n    sectionInUI: 2,\n    contract: 'BshareMaxiLPBShareRewardPool',\n    depositTokenName: '80BSHARE-20WBNB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  BusmBusdLPBShareRewardPool: {\n    name: 'Earn BSHARE by BUSM-BUSD LP',\n    poolId: 6,\n    sectionInUI: 1,\n    contract: 'BusmBusdLPBShareRewardPool',\n    depositTokenName: 'BUSM-BUSD-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 0,\n    closedForStaking: false,\n  },\n  // BombBtcbLPApeBShareRewardPool: {\n  //   name: 'Earn BSHARE by BOMB-BTCB LP',\n  //   poolId: 3,\n  //   sectionInUI: 2,\n  //   contract: 'BombBtcbLPApeBShareRewardPool',\n  //   depositTokenName: 'BOMB-BTCB-LP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: false,\n  //   sort: 7,\n  //   closedForStaking: false,\n  // },\n  // BshareBnbApeLPBShareRewardPool: {\n  //   name: 'Earn BSHARE by BSHARE-BNB Ape LP',\n  //   poolId: 2,\n  //   sectionInUI: 1,\n  //   contract: 'BshareBnbApeLPBShareRewardPool',\n  //   depositTokenName: 'BSHARE-BNB-APELP',\n  //   earnTokenName: 'BSHARE',\n  //   finished: true,\n  //   sort: 5,\n  //   closedForStaking: true,\n  // },\n  BombBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB',\n    poolId: 5,\n    sectionInUI: 0,\n    contract: 'BombBShareRewardPool',\n    depositTokenName: 'BOMB',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: true,\n  },\n  BBondBShareRewardPool: {\n    name: 'Earn BSHARE by BBOND',\n    poolId: 9,\n    sectionInUI: 3,\n    contract: 'BBondBShareRewardPool',\n    depositTokenName: 'BBOND',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n  BshareBnbLPBShareRewardPool: {\n    name: 'Earn BSHARE by BSHARE-BNB LP',\n    poolId: 0,\n    sectionInUI: 3,\n    contract: 'BshareBnbLPBShareRewardPool',\n    depositTokenName: 'BSHARE-BNB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 2,\n    closedForStaking: false,\n  },\n  BombBtcbLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB-BTCB LP',\n    poolId: 1,\n    sectionInUI: 3,\n    contract: 'BombBtcbLPBShareRewardPool',\n    depositTokenName: 'BOMB-BTCB-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 1,\n    closedForStaking: false,\n  },\n  BombBshareLPBShareRewardPool: {\n    name: 'Earn BSHARE by BOMB-BSHARE LP',\n    poolId: 4,\n    sectionInUI: 0,\n    contract: 'BombBshareLPBShareRewardPool',\n    depositTokenName: 'BOMB-BSHARE-LP',\n    earnTokenName: 'BSHARE',\n    finished: false,\n    sort: 4,\n    closedForStaking: false,\n  },\n};\n\nexport default configurations[process.env.NODE_ENV || 'development'];\n","import React, {createContext, useCallback, useState} from 'react';\nimport styled from 'styled-components';\n\ninterface ModalsContext {\n  content?: React.ReactNode;\n  isOpen?: boolean;\n  onPresent: (content: React.ReactNode) => void;\n  onDismiss: () => void;\n}\n\nexport const Context = createContext<ModalsContext>({\n  onPresent: () => {},\n  onDismiss: () => {},\n});\n\nconst Modals: React.FC = ({children}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [content, setContent] = useState<React.ReactNode>();\n\n  const handlePresent = useCallback(\n    (modalContent: React.ReactNode) => {\n      setContent(modalContent);\n      setIsOpen(true);\n    },\n    [setContent, setIsOpen],\n  );\n\n  const handleDismiss = useCallback(() => {\n    setContent(undefined);\n    setIsOpen(false);\n  }, [setContent, setIsOpen]);\n\n  return (\n    <Context.Provider\n      value={{\n        content,\n        isOpen,\n        onPresent: handlePresent,\n        onDismiss: handleDismiss,\n      }}\n    >\n      {children}\n      {isOpen && (\n        <StyledModalWrapper>\n          <StyledModalBackdrop onClick={handleDismiss} />\n          {React.isValidElement(content) &&\n            React.cloneElement(content, {\n              onDismiss: handleDismiss,\n            })}\n        </StyledModalWrapper>\n      )}\n    </Context.Provider>\n  );\n};\n\nconst StyledModalWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nconst StyledModalBackdrop = styled.div`\n  background-color: #00000088;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n`;\n\nexport default Modals;\n","import React, {useState, useEffect} from 'react';\n\nconst FAST_INTERVAL = 10000;\nconst SLOW_INTERVAL = 60000;\n\nexport const RefreshContext = React.createContext({slow: 0, fast: 0});\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nexport const RefreshContextProvider: React.FC = ({children}) => {\n  const [slow, setSlow] = useState(0);\n  const [fast, setFast] = useState(0);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1);\n    }, FAST_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1);\n    }, SLOW_INTERVAL);\n    return () => clearInterval(interval);\n  }, []);\n\n  return <RefreshContext.Provider value={{slow, fast}}>{children}</RefreshContext.Provider>;\n};\n","import {createAction} from '@reduxjs/toolkit';\n\nexport type PopupContent = {\n  txn?: {\n    hash: string;\n    success: boolean;\n    summary?: string;\n  };\n  error?: {\n    message: string;\n    stack: string;\n  };\n};\n\nexport const updateBlockNumber = createAction<{chainId: number; blockNumber: number}>('app/updateBlockNumber');\n\nexport const toggleWalletModal = createAction<void>('app/toggleWalletModal');\n\nexport const toggleSettingsMenu = createAction<void>('app/toggleSettingsMenu');\n\nexport const addPopup = createAction<{\n  key?: string;\n  removeAfterMs?: number | null;\n  content: PopupContent;\n}>('app/addPopup');\n\nexport const removePopup = createAction<{key: string}>('app/removePopup');\n","import {Deployments} from './deployments';\nimport {ChainId} from '@pancakeswap/sdk';\n\nexport type Configuration = {\n  chainId: ChainId;\n  networkName: string;\n  ftmscanUrl: string;\n  defaultProvider: string;\n  deployments: Deployments;\n  externalTokens: {[contractName: string]: [string, number]};\n  config?: EthereumConfig;\n\n  baseLaunchDate: Date;\n  bondLaunchesAt: Date;\n  boardroomLaunchesAt: Date;\n\n  refreshInterval: number;\n};\n\nexport type EthereumConfig = {\n  testing: boolean;\n  autoGasMultiplier: number;\n  defaultConfirmations: number;\n  defaultGas: string;\n  defaultGasPrice: string;\n  ethereumNodeTimeout: number;\n};\n\nexport const defaultEthereumConfig = {\n  testing: false,\n  autoGasMultiplier: 1.5,\n  defaultConfirmations: 3,\n  defaultGas: '6000000',\n  defaultGasPrice: '7000000000000',\n  ethereumNodeTimeout: 10000,\n};\n","import Web3 from 'web3';\nimport {defaultEthereumConfig, EthereumConfig} from './config';\nimport {formatUnits, parseUnits} from 'ethers/lib/utils';\nimport {BigNumber} from 'ethers';\n\nexport function web3ProviderFrom(endpoint: string, config?: EthereumConfig): any {\n  const ethConfig = Object.assign(defaultEthereumConfig, config || {});\n\n  const providerClass = endpoint.includes('wss') ? Web3.providers.WebsocketProvider : Web3.providers.HttpProvider;\n\n  return new providerClass(endpoint, {\n    timeout: ethConfig.ethereumNodeTimeout,\n  });\n}\n\nexport function balanceToDecimal(s: string): string {\n  return formatUnits(s);\n}\n\nexport function decimalToBalance(d: string | number, decimals = 18): BigNumber {\n  return parseUnits(String(d), decimals);\n}\n","import {createReducer} from '@reduxjs/toolkit';\nimport {\n  addTransaction,\n  checkedTransaction,\n  clearAllTransactions,\n  finalizeTransaction,\n  SerializableTransactionReceipt,\n} from './actions';\n\nconst now = () => new Date().getTime();\n\nexport interface TransactionDetails {\n  hash: string;\n  approval?: {tokenAddress: string; spender: string};\n  summary?: string;\n  receipt?: SerializableTransactionReceipt;\n  lastCheckedBlockNumber?: number;\n  addedTime: number;\n  confirmedTime?: number;\n  from: string;\n}\n\nexport interface TransactionState {\n  [chainId: number]: {\n    [txHash: string]: TransactionDetails;\n  };\n}\n\nexport const initialState: TransactionState = {};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(addTransaction, (transactions, {payload: {chainId, from, hash, approval, summary}}) => {\n      if (transactions[chainId]?.[hash]) {\n        throw Error('Attempted to add existing transaction.');\n      }\n      const txs = transactions[chainId] ?? {};\n      txs[hash] = {hash, approval, summary, from, addedTime: now()};\n      transactions[chainId] = txs;\n    })\n    .addCase(clearAllTransactions, (transactions, {payload: {chainId}}) => {\n      if (!transactions[chainId]) return;\n      transactions[chainId] = {};\n    })\n    .addCase(checkedTransaction, (transactions, {payload: {chainId, hash, blockNumber}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      if (!tx.lastCheckedBlockNumber) {\n        tx.lastCheckedBlockNumber = blockNumber;\n      } else {\n        tx.lastCheckedBlockNumber = Math.max(blockNumber, tx.lastCheckedBlockNumber);\n      }\n    })\n    .addCase(finalizeTransaction, (transactions, {payload: {hash, chainId, receipt}}) => {\n      const tx = transactions[chainId]?.[hash];\n      if (!tx) {\n        return;\n      }\n      tx.receipt = receipt;\n      tx.confirmedTime = now();\n    }),\n);\n","import {createReducer, nanoid} from '@reduxjs/toolkit';\nimport {addPopup, PopupContent, removePopup, toggleWalletModal, toggleSettingsMenu, updateBlockNumber} from './actions';\n\ntype PopupList = Array<{\n  key: string;\n  show: boolean;\n  content: PopupContent;\n  removeAfterMs: number | null;\n}>;\n\nexport interface ApplicationState {\n  blockNumber: {[chainId: number]: number};\n  popupList: PopupList;\n  walletModalOpen: boolean;\n  settingsMenuOpen: boolean;\n}\n\nconst initialState: ApplicationState = {\n  blockNumber: {},\n  popupList: [],\n  walletModalOpen: false,\n  settingsMenuOpen: false,\n};\n\nexport default createReducer(initialState, (builder) =>\n  builder\n    .addCase(updateBlockNumber, (state, action) => {\n      const {chainId, blockNumber} = action.payload;\n      if (typeof state.blockNumber[chainId] !== 'number') {\n        state.blockNumber[chainId] = blockNumber;\n      } else {\n        state.blockNumber[chainId] = Math.max(blockNumber, state.blockNumber[chainId]);\n      }\n    })\n    .addCase(toggleWalletModal, (state) => {\n      state.walletModalOpen = !state.walletModalOpen;\n    })\n    .addCase(toggleSettingsMenu, (state) => {\n      state.settingsMenuOpen = !state.settingsMenuOpen;\n    })\n    .addCase(addPopup, (state, {payload: {content, key, removeAfterMs = 15000}}) => {\n      state.popupList = (key ? state.popupList.filter((popup) => popup.key !== key) : state.popupList).concat([\n        {\n          key: key || nanoid(),\n          show: true,\n          content,\n          removeAfterMs,\n        },\n      ]);\n    })\n    .addCase(removePopup, (state, {payload: {key}}) => {\n      state.popupList.forEach((p) => {\n        if (p.key === key) {\n          p.show = false;\n        }\n      });\n    }),\n);\n","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit';\nimport {save, load} from 'redux-localstorage-simple';\nimport transactions from './transactions/reducer';\nimport application from './application/reducer';\n\nconst PERSISTED_KEYS: string[] = ['transactions'];\n\nconst store = configureStore({\n  reducer: {\n    application,\n    transactions,\n  },\n  middleware: [...getDefaultMiddleware({thunk: false}), save({states: PERSISTED_KEYS})],\n  preloadedState: load({states: PERSISTED_KEYS}),\n});\n\nexport default store;\n\nexport type AppState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","export const white = '#FFF';\nexport const black = '#000';\n\nexport const green = {\n  500: '#00D110',\n};\n\nexport const purple = {\n  200: '#bd7cfe',\n  400: '#ab47bc',\n  700: '#7b1fa2',\n};\n\nexport const yellow = {\n  200: '#ffdb4d',\n  400: '#ab47bc',\n  700: '#e6b800',\n};\n\nexport const red = {\n  100: '#C1C1FF',\n  200: '#7575FF',\n  500: '#9090FF',\n};\n\nexport const grey = {\n  100: '#f5f5f5',\n  200: '#eeeeee',\n  300: '#e0e0e0',\n  400: '#bdbdbd',\n  500: '#9e9e9e',\n  600: '#757575',\n  700: '#616161',\n  800: '#424242',\n  900: '#212121',\n};\n\nexport const bg = '#000000';\n\nexport const teal = {\n  200: '#64ffda',\n};\n\nexport const newNavy = {\n  200: '171923',\n};\n","import {black, teal, grey, red, white, yellow, newNavy} from './colors';\n\nconst theme = {\n  borderRadius: 13,\n  color: {\n    black,\n    grey,\n    yellow,\n    primary: {\n      light: red[200],\n      main: red[500],\n    },\n    secondary: {\n      main: teal[200],\n    },\n    white,\n    teal,\n    newNavy,\n  },\n  siteWidth: 1200,\n  spacing: {\n    1: 4,\n    2: 8,\n    3: 16,\n    4: 24,\n    5: 32,\n    6: 48,\n    7: 64,\n  },\n  topBarSize: 72,\n};\n\nexport default theme;\n","//Your theme for the new stuff using material UI has been copied here so it doesn't conflict\nimport { createTheme } from '@material-ui/core/styles';\n\nconst newTheme = createTheme({\n  palette: {\n    type: 'light',\n    text: {\n      primary: '#dddfee',\n      secondary: 'white',\n      yellow: '#f9d749',\n    },\n    background: {\n      default: '#121212',\n      paper: '#171923',\n    },\n    primary: {\n      light: '#ffe066',\n      main: '#2c2560',\n      dark: '#b38f00',\n      contrastText: '#000',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n    action: {\n      disabledBackground: '#CDCDCD',\n      active: '#000',\n      hover: '#fff',\n    },\n  },\n  typography: {\n    color: '#2c2560',\n    fontFamily: ['\"Rubik\"', 'sans-serif'].join(','),\n  },\n});\n\nexport default newTheme;\n","import {useCallback, useEffect, useState} from 'react';\n\nconst VISIBILITY_STATE_SUPPORTED = 'visibilityState' in document;\n\nfunction isWindowVisible() {\n  return !VISIBILITY_STATE_SUPPORTED || document.visibilityState !== 'hidden';\n}\n\n/**\n * Returns whether the window is currently visible to the user.\n */\nexport default function useIsWindowVisible(): boolean {\n  const [focused, setFocused] = useState<boolean>(isWindowVisible());\n  const listener = useCallback(() => {\n    setFocused(isWindowVisible());\n  }, [setFocused]);\n\n  useEffect(() => {\n    if (!VISIBILITY_STATE_SUPPORTED) return undefined;\n\n    document.addEventListener('visibilitychange', listener);\n    return () => {\n      document.removeEventListener('visibilitychange', listener);\n    };\n  }, [listener]);\n\n  return focused;\n}\n","import {useCallback, useEffect, useState} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport useDebounce from '../../hooks/useDebounce';\nimport useIsWindowVisible from '../../hooks/useIsWindowVisible';\nimport {updateBlockNumber} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport default function Updater(): null {\n  const {ethereum, chainId} = useWallet();\n\n  const dispatch = useDispatch();\n\n  const windowVisible = useIsWindowVisible();\n\n  const [state, setState] = useState<{\n    chainId: number | undefined;\n    blockNumber: number | null;\n  }>({\n    chainId,\n    blockNumber: null,\n  });\n\n  const blockNumberCallback = useCallback(\n    (blockNumber: number) => {\n      setState((state) => {\n        if (chainId === state.chainId) {\n          if (typeof state.blockNumber !== 'number') return {chainId, blockNumber};\n          return {chainId, blockNumber: Math.max(blockNumber, state.blockNumber)};\n        }\n        return state;\n      });\n    },\n    [chainId, setState],\n  );\n\n  // attach/detach listeners\n  // @ts-ignore\n  useEffect(() => {\n    if (!ethereum || !chainId || !windowVisible) return undefined;\n    setState({chainId, blockNumber: null});\n\n    const provider = getDefaultProvider();\n    provider\n      .getBlockNumber()\n      .then(blockNumberCallback)\n      .catch((error) => console.error(`Failed to get block number for chainId: ${chainId}`, error));\n\n    provider.on('block', blockNumberCallback);\n    return () => provider.removeListener('block', blockNumberCallback);\n  }, [dispatch, chainId, ethereum, blockNumberCallback, windowVisible]);\n\n  const debouncedState = useDebounce(state, 100);\n\n  useEffect(() => {\n    if (!debouncedState.chainId || !debouncedState.blockNumber || !windowVisible) return;\n    dispatch(\n      updateBlockNumber({\n        chainId: debouncedState.chainId,\n        blockNumber: debouncedState.blockNumber,\n      }),\n    );\n  }, [windowVisible, dispatch, debouncedState.blockNumber, debouncedState.chainId]);\n\n  return null;\n}\n","import {useEffect, useState} from 'react';\n\n// modified from https://usehooks.com/useDebounce/\nexport default function useDebounce<T>(value: T, delay: number): T {\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\n\n  useEffect(() => {\n    // Update debounced value after delay\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    // Cancel the timeout if value changes (also on delay change or unmount)\n    // This is how we prevent debounced value from updating if value is changed ...\n    // .. within the delay period. Timeout gets cleared and restarted.\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n}\n","import {useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {useWallet} from 'use-wallet';\nimport {useAddPopup, useBlockNumber} from '../application/hooks';\nimport {AppDispatch, AppState} from '../index';\nimport {checkedTransaction, finalizeTransaction} from './actions';\nimport {getDefaultProvider} from '../../utils/provider';\n\nexport function shouldCheck(\n  lastBlockNumber: number,\n  tx: {addedTime: number; receipt?: {}; lastCheckedBlockNumber?: number},\n): boolean {\n  if (tx.receipt) return false;\n  if (!tx.lastCheckedBlockNumber) return true;\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber;\n  if (blocksSinceCheck < 1) return false;\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60;\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9;\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2;\n  } else {\n    // otherwise every block\n    return true;\n  }\n}\n\nexport default function Updater(): null {\n  const {chainId, ethereum} = useWallet();\n\n  const lastBlockNumber = useBlockNumber();\n\n  const dispatch = useDispatch<AppDispatch>();\n  const state = useSelector<AppState, AppState['transactions']>((state) => state.transactions);\n\n  const transactions = chainId ? state[chainId] ?? {} : {};\n\n  // show popup on confirm\n  const addPopup = useAddPopup();\n\n  useEffect(() => {\n    if (!chainId || !ethereum || !lastBlockNumber) {\n      return;\n    }\n\n    const provider = getDefaultProvider();\n    Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .forEach((hash) => {\n        provider\n          .getTransactionReceipt(hash)\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                }),\n              );\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash,\n              );\n            } else {\n              dispatch(checkedTransaction({chainId, hash, blockNumber: lastBlockNumber}));\n            }\n          })\n          .catch((error) => {\n            console.error(`failed to check transaction hash: ${hash}`, error);\n          });\n      });\n  }, [chainId, ethereum, transactions, lastBlockNumber, dispatch, addPopup]);\n\n  return null;\n}\n","import React from 'react';\nimport ApplicationUpdater from './application/updater';\nimport TransactionUpdater from './transactions/updater';\n\nconst Updaters = () => (\n  <>\n    <ApplicationUpdater />\n    <TransactionUpdater />\n  </>\n);\n\nexport default Updaters;\n","import Loader from './Loader';\n\nexport default Loader;\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nconst Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n        transform: 'translate(-50%, -50%)',\n        color: 'white',\n      }}\n    >\n      <Typography>Loading</Typography>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, {useContext} from 'react';\nimport {AlertCircle, CheckCircle} from 'react-feather';\nimport styled, {ThemeContext} from 'styled-components';\nimport {useWallet} from 'use-wallet';\nimport config from '../../config';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function TransactionPopup({\n  hash,\n  success,\n  summary,\n}: {\n  hash: string;\n  success?: boolean;\n  summary?: string;\n}) {\n  const {chainId} = useWallet();\n  const theme = useContext(ThemeContext);\n\n  return (\n    <RowNoFlex>\n      <div style={{paddingRight: 16}}>\n        {success ? <CheckCircle color={theme.color.teal[200]} size={24} /> : <AlertCircle color=\"#FF6871\" size={24} />}\n      </div>\n      <div>\n        <StyledPopupDesc>{summary ?? 'Hash: ' + hash.slice(0, 8) + '...' + hash.slice(58, 65)}</StyledPopupDesc>\n        {chainId && (\n          <StyledLink target=\"_blank\" href={`${config.ftmscanUrl}/tx/${hash}`}>\n            View on BSCscan\n          </StyledLink>\n        )}\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, {useCallback} from 'react';\nimport {AlertCircle} from 'react-feather';\nimport styled from 'styled-components';\n\nconst RowNoFlex = styled.div`\n  flex-wrap: nowrap;\n`;\n\nexport default function ErrorPopup({message, stack}: {message: string; stack: string}) {\n  const copyErrorDetails = useCallback(async () => {\n    await navigator.clipboard.writeText(`${message}\\n${stack}`);\n  }, [message, stack]);\n\n  return (\n    <RowNoFlex>\n      <div style={{paddingRight: 16}}>\n        <AlertCircle color=\"#FF6871\" size={24} />\n      </div>\n      <div>\n        <StyledPopupDesc>{message}</StyledPopupDesc>\n        <StyledLink onClick={copyErrorDetails} href=\"#\">\n          Copy error details\n        </StyledLink>\n      </div>\n    </RowNoFlex>\n  );\n}\n\nconst StyledPopupDesc = styled.span`\n  font-weight: 500;\n  color: ${(props) => props.theme.color.grey[300]};\n`;\n\nconst StyledLink = styled.a`\n  color: ${(props) => props.theme.color.grey[500]};\n`;\n","import React, {useCallback, useContext, useEffect} from 'react';\nimport {X} from 'react-feather';\nimport {useSpring} from 'react-spring/web';\nimport styled, {ThemeContext} from 'styled-components';\nimport {animated} from 'react-spring';\nimport {PopupContent} from '../../state/application/actions';\nimport {useRemovePopup} from '../../state/application/hooks';\nimport TransactionPopup from './TransactionPopup';\nimport ErrorPopup from './ErrorPopup';\n\nexport const StyledClose = styled(X)`\n  position: absolute;\n  right: 10px;\n  top: 10px;\n\n  :hover {\n    cursor: pointer;\n  }\n`;\nexport const Popup = styled.div`\n  display: inline-block;\n  width: 100%;\n  padding: 1em;\n  background-color: ${({theme}) => theme.color.grey[700]};\n  position: relative;\n  border-radius: 10px;\n  padding: 20px;\n  padding-right: 35px;\n  overflow: hidden;\n\n  @media (max-width: 768px) {\n    min-width: 290px;\n  }\n`;\nconst Fader = styled.div`\n  position: absolute;\n  bottom: 0px;\n  left: 0px;\n  width: 100%;\n  height: 2px;\n  background-color: ${({theme}) => theme.color.grey[400]};\n`;\n\nconst AnimatedFader = animated(Fader);\n\nexport default function PopupItem({\n  removeAfterMs,\n  content,\n  popKey,\n}: {\n  removeAfterMs: number | null;\n  content: PopupContent;\n  popKey: string;\n}) {\n  const removePopup = useRemovePopup();\n  const removeThisPopup = useCallback(() => removePopup(popKey), [popKey, removePopup]);\n  useEffect(() => {\n    if (removeAfterMs === null) return undefined;\n\n    const timeout = setTimeout(() => {\n      removeThisPopup();\n    }, removeAfterMs);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [removeAfterMs, removeThisPopup]);\n\n  const theme = useContext(ThemeContext);\n\n  let popupContent;\n  if ('txn' in content) {\n    const {\n      txn: {hash, success, summary},\n    } = content;\n    popupContent = <TransactionPopup hash={hash} success={success} summary={summary} />;\n  }\n  if ('error' in content) {\n    const {\n      error: {message, stack},\n    } = content;\n    popupContent = <ErrorPopup message={message} stack={stack} />;\n  }\n\n  const faderStyle = useSpring({\n    from: {width: '100%'},\n    to: {width: '0%'},\n    config: {duration: removeAfterMs ?? undefined},\n  });\n\n  return (\n    <Popup>\n      <StyledClose color={theme.text2} onClick={removeThisPopup} />\n      {popupContent}\n      {removeAfterMs !== null ? <AnimatedFader style={faderStyle} /> : null}\n    </Popup>\n  );\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport {useActivePopups} from '../../state/application/hooks';\nimport PopupItem from './PopupItem';\n\nconst MobilePopupWrapper = styled.div<{height: string | number}>`\n  position: relative;\n  max-width: 100%;\n  height: ${({height}) => height};\n  margin: ${({height}) => (height ? '0 auto;' : 0)};\n  margin-bottom: ${({height}) => (height ? '20px' : 0)}};\n\n  display: none;\n  @media (max-width: 768px) {\n    display: block;\n  };\n`;\n\nconst MobilePopupInner = styled.div`\n  height: 99%;\n  overflow-x: auto;\n  overflow-y: hidden;\n  display: flex;\n  flex-direction: row;\n  -webkit-overflow-scrolling: touch;\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\n\nconst FixedPopupColumn = styled.div`\n  position: fixed;\n  top: 64px;\n  margin-right: 24px;\n  right: 3rem;\n  max-width: 355px !important;\n  width: 100%;\n  z-index: 2;\n\n  @media (max-width: 768px) {\n    display: none;\n  } ;\n`;\n\nexport default function Popups() {\n  // get all popups\n  const activePopups = useActivePopups();\n\n  return (\n    <>\n      <FixedPopupColumn>\n        {activePopups.map((item) => (\n          <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n        ))}\n      </FixedPopupColumn>\n      <MobilePopupWrapper height={activePopups?.length > 0 ? 'fit-content' : 0}>\n        <MobilePopupInner>\n          {activePopups // reverse so new items up front\n            .slice(0)\n            .reverse()\n            .map((item) => (\n              <PopupItem key={item.key} content={item.content} popKey={item.key} removeAfterMs={item.removeAfterMs} />\n            ))}\n        </MobilePopupInner>\n      </MobilePopupWrapper>\n    </>\n  );\n}\n","import { useCallback, useEffect, useState } from 'react';\n\nconst useChainId = () => {\n    const [chainId, setChainId] = useState(97);\n\n    const fetchChainId = useCallback(async () => {\n        if (window.ethereum) {\n            const ethereum = window.ethereum;\n            let chainId = await ethereum.request({\n                method: 'eth_chainId',\n            });\n            chainId = parseInt(chainId, 16);\n            setChainId(chainId);\n\n            window.ethereum.on('networkChanged', function (chainId) {\n                chainId = parseInt(chainId, 16);\n                setChainId(chainId);\n            });\n        }\n    }, []);\n\n    useEffect(() => {\n        fetchChainId().catch((err) => console.error(err.stack));\n\n        const refreshChainId = setInterval(fetchChainId, 1000);\n        return () => clearInterval(refreshChainId);\n    }, [fetchChainId]);\n\n    return chainId;\n};\n\nexport default useChainId;","import React, {Suspense, lazy} from 'react';\nimport {Provider} from 'react-redux';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\nimport {ThemeProvider as TP} from '@material-ui/core/styles';\nimport {ThemeProvider as TP1} from 'styled-components';\nimport {UseWalletProvider} from 'use-wallet';\nimport usePromptNetwork from './hooks/useNetworkPrompt';\nimport BanksProvider from './contexts/Banks';\nimport BombFinanceProvider from './contexts/BombFinanceProvider';\nimport ModalsProvider from './contexts/Modals';\nimport store from './state';\nimport theme from './theme';\nimport newTheme from './newTheme';\nimport config from './config';\nimport Updaters from './state/Updaters';\nimport Loader from './components/Loader';\nimport Popups from './components/Popups';\nimport useChainId from './hooks/useChainId';\n//import Regulations from './views/Regulations/Regulations';\nimport {RefreshContextProvider} from './contexts/RefreshContext';\n\nconst Home = lazy(() => import('./views/Home'));\nconst Farm = lazy(() => import('./views/Farm'));\nconst Boardroom = lazy(() => import('./views/Boardroom'));\nconst Bond = lazy(() => import('./views/Bond'));\nconst Xbomb = lazy(() => import('./views/Stake'));\nconst Supply = lazy(() => import('./views/Supply'));\nconst Dashboard = lazy(() => import('./views/Dashboard'));\n// const SBS = lazy(() => import('./views/Sbs'));\n// const Liquidity = lazy(() => import('./views/Liquidity'));\n\nconst NoMatch = () => (\n  <h3 style={{position: 'absolute', top: '50%', left: '50%', transform: 'translate(-50%, -50%)'}}>\n    URL Not Found. <a href=\"/\">Go back home.</a>\n  </h3>\n);\n\nconst App: React.FC = () => {\n  // Clear localStorage for mobile users\n  if (typeof localStorage.version_app === 'undefined' || localStorage.version_app !== '1.1') {\n    localStorage.clear();\n    localStorage.setItem('connectorId', '');\n    localStorage.setItem('version_app', '1.1');\n  }\n\n  usePromptNetwork();\n\n  return (\n    <Providers>\n      <Router>\n        <Suspense fallback={<Loader />}>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home />\n            </Route>\n            <Route path=\"/farm\">\n              <Farm />\n            </Route>\n            <Route path=\"/boardroom\">\n              <Boardroom />\n            </Route>\n            <Route path=\"/bond\">\n              <Bond />\n            </Route>\n            <Route path=\"/xbomb\">\n              <Xbomb />\n            </Route>\n            <Route path=\"/supply\">\n              <Supply />\n            </Route>\n            <Route path=\"/dashboard\">\n              <Dashboard />\n            </Route>\n            {/* <Route path=\"/sbs\">\n              <SBS />\n            </Route> */}\n            {/* <Route path=\"/regulations\">\n              <Regulations />\n            </Route> */}\n            {/* <Route path=\"/liquidity\">\n              <Liquidity />\n            </Route> */}\n            <Route path=\"*\">\n              <NoMatch />\n            </Route>\n          </Switch>\n        </Suspense>\n      </Router>\n    </Providers>\n  );\n};\n\nconst UseWalletProviderWrapper = (props: any) => {\n  const chainId = useChainId();\n\n  return <UseWalletProvider chainId={chainId} {...props}></UseWalletProvider>;\n}\n\nconst Providers: React.FC = ({children}) => {\n  return (\n    <TP1 theme={theme}>\n      <TP theme={newTheme}>\n        <UseWalletProviderWrapper\n                    chainId={config.chainId}\n\n          connectors={{\n            walletconnect: { rpcUrl: 'https://rpc.ankr.com/bsc' },\n            walletlink: {\n           //   url: config.defaultProvider,\n              url: 'https://rpc.ankr.com/bsc',\n              appName: 'bomb.money',\n              appLogoUrl: 'https://raw.githubusercontent.com/bombmoney/bomb-assets/master/bomb-512.png',\n            },\n          }}\n        >\n          <Provider store={store}>\n            <Updaters />\n            <RefreshContextProvider>\n              <BombFinanceProvider>\n                <ModalsProvider>\n                  <BanksProvider>\n                    <>\n                      <Popups />\n                      {children}\n                    </>\n                  </BanksProvider>\n                </ModalsProvider>\n              </BombFinanceProvider>\n            </RefreshContextProvider>\n          </Provider>\n        </UseWalletProviderWrapper>\n      </TP>\n    </TP1>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}